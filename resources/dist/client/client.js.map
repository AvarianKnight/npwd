{
  "version": 3,
  "sources": ["../../utils/fivem.ts", "../../client/cl_utils.ts", "../../../shared/deepMergeObjects.ts", "../../client/cl_config.ts", "../../utils/apps.ts", "../../utils/messages.ts", "../../../typings/phone.ts", "../../client/functions.ts", "../../client/animations/animation.service.ts", "../../client/animations/animation.controller.ts", "../../client/cl_main.ts", "../../../typings/twitter.ts", "../../client/cl_twitter.ts", "../../../typings/contact.ts", "../../client/cl_contacts.ts", "../../../typings/marketplace.ts", "../../client/cl_marketplace.ts", "../../../typings/notes.ts", "../../client/cl_notes.ts", "../../../typings/photo.ts", "../../client/cl_photo.ts", "../../../typings/messages.ts", "../../client/cl_messages.ts", "../../../typings/call.ts", "../../client/sounds/client-sound.class.ts", "../../client/calls/cl_calls.service.ts", "../../server/utils/miscUtils.ts", "../../client/calls/cl_calls.controller.ts", "../../../typings/match.ts", "../../client/cl_match.ts", "../../client/cl_exports.ts", "../../../typings/settings.ts", "../../client/settings/client-kvp.service.ts", "../../client/settings/client-settings.ts", "../../../typings/bank.ts", "../../client/cl_bank.ts", "../../../typings/darkmarket.ts", "../../client/cl_darkmarket.ts", "../../client/client.ts"],
  "sourcesContent": ["// https://forum.cfx.re/t/typescript-vs-lua-questions/612483/11\r\nexport const Delay = (ms: number): Promise<void> => new Promise((res) => setTimeout(res, ms));\r\n\r\n// Credits to d0p3t\r\n// https://github.com/d0p3t/fivem-js/blob/master/src/utils/UUIDV4.ts\r\nexport const uuidv4 = (): string => {\r\n  let uuid = '';\r\n  for (let ii = 0; ii < 32; ii += 1) {\r\n    switch (ii) {\r\n      case 8:\r\n      case 20:\r\n        uuid += '-';\r\n        uuid += ((Math.random() * 16) | 0).toString(16);\r\n        break;\r\n      case 12:\r\n        uuid += '-';\r\n        uuid += '4';\r\n        break;\r\n      case 16:\r\n        uuid += '-';\r\n        uuid += ((Math.random() * 4) | 8).toString(16);\r\n        break;\r\n      default:\r\n        uuid += ((Math.random() * 16) | 0).toString(16);\r\n    }\r\n  }\r\n  return uuid;\r\n};\r\n", "import { uuidv4 } from '../utils/fivem';\r\nimport { ClUtils } from './client';\r\n\r\ninterface ISettings {\r\n  promiseTimeout: number;\r\n}\r\n\r\ninterface ISettingsParams {\r\n  promiseTimeout?: number;\r\n}\r\n\r\nexport default class ClientUtils {\r\n  private _settings: ISettings;\r\n  private _defaultSettings: ISettings = {\r\n    promiseTimeout: 15000,\r\n  };\r\n\r\n  constructor(settings?: ISettingsParams) {\r\n    this.setSettings(settings);\r\n  }\r\n\r\n  public setSettings(settings: ISettingsParams) {\r\n    this._settings = {\r\n      ...this._defaultSettings,\r\n      ...settings,\r\n    };\r\n  }\r\n\r\n  public emitNetPromise<T = any>(eventName: string, ...args: any[]): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      let hasTimedOut = false;\r\n\r\n      setTimeout(() => {\r\n        hasTimedOut = true;\r\n        reject(`${eventName} has timed out after ${this._settings.promiseTimeout} ms`);\r\n      }, this._settings.promiseTimeout);\r\n\r\n      // Have to use this as the regular uuid refused to work here for some\r\n      // fun reason\r\n      const uniqId = uuidv4();\r\n\r\n      const listenEventName = `${eventName}:${uniqId}`;\r\n\r\n      emitNet(eventName, listenEventName, ...args);\r\n\r\n      const handleListenEvent = (data: T) => {\r\n        removeEventListener(listenEventName, handleListenEvent);\r\n        if (hasTimedOut) return;\r\n        resolve(data);\r\n      };\r\n      onNet(listenEventName, handleListenEvent);\r\n    });\r\n  }\r\n}\r\n\r\ntype CallbackFn<T> = (data: T, cb: Function) => void;\r\n\r\n/**\r\n * A wrapper for handling NUI Callbacks\r\n *  @param event - The event name to listen for\r\n *  @param callback - The callback function\r\n */\r\nexport const RegisterNuiCB = <T = any>(event: string, callback: CallbackFn<T>) => {\r\n  RegisterNuiCallbackType(event);\r\n  on(`__cfx_nui:${event}`, callback);\r\n};\r\n\r\n/**\r\n * Returns a promise that will be resolved once the client has been loaded.\r\n */\r\nexport const playerLoaded = () => {\r\n  return new Promise<any>((resolve) => {\r\n    const id = setInterval(() => {\r\n      if (global.isPlayerLoaded) resolve(id);\r\n    }, 50);\r\n  }).then((id) => clearInterval(id));\r\n};\r\n\r\n/**\r\n *  Will Register an NUI event listener that will immediately\r\n *  proxy to a server side event of the same name and wait\r\n *  for the response.\r\n *  @param event - The event name to listen for\r\n */\r\nexport const RegisterNuiProxy = (event: string) => {\r\n  RegisterNuiCallbackType(event);\r\n  on(`__cfx_nui:${event}`, async (data: unknown, cb: Function) => {\r\n    if (!global.isPlayerLoaded) await playerLoaded();\r\n    try {\r\n      const res = await ClUtils.emitNetPromise(event, data);\r\n      cb(res);\r\n    } catch (e) {\r\n      console.error('Error encountered while listening to resp. Error:', e);\r\n      cb({ status: 'error' });\r\n    }\r\n  });\r\n};\r\n\r\ntype MsgpackTypes =\r\n  | 'string'\r\n  | 'number'\r\n  | 'bigint'\r\n  | 'boolean'\r\n  | 'symbol'\r\n  | 'undefined'\r\n  | 'function'\r\n  | 'object';\r\n\r\ntype WrapperNetEventCb = <T extends any[]>(...args: T) => void;\r\n\r\n/**\r\n * Wrapped onNet so we can use generic types on return values from server\r\n * @param event - The event name to listen to\r\n * @param cb - The callback function to execute\r\n */\r\nexport const onNpwdEvent = (event: string, cb: WrapperNetEventCb) => {\r\n  onNet(event, cb);\r\n};\r\nexport const verifyExportArgType = (\r\n  exportName: string,\r\n  passedArg: unknown,\r\n  validTypes: MsgpackTypes[],\r\n): void => {\r\n  const passedArgType = typeof passedArg;\r\n\r\n  if (!validTypes.includes(passedArgType))\r\n    throw new Error(\r\n      `Export ${exportName} was called with incorrect argument type (${validTypes.join(\r\n        ', ',\r\n      )}. Passed: ${passedArg}, Type: ${passedArgType})`,\r\n    );\r\n};\r\n", "export function isObject(item: any): boolean {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n\r\nexport function deepMergeObjects<T>(target: any, ...sources: any): T {\r\n  if (!sources.length) return target;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(target) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!target[key]) Object.assign(target, { [key]: {} });\r\n        deepMergeObjects(target[key], source[key]);\r\n      } else {\r\n        Object.assign(target, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return deepMergeObjects(target, ...sources);\r\n}\r\n", "import { ResourceConfig } from '@typings/config';\r\nimport { deepMergeObjects } from '@shared/deepMergeObjects';\r\nimport defaultConfig from '../../config.default.json';\r\n\r\n// Setup and export the config for the resource\r\nexport const config = (() => {\r\n  const resourceName = GetCurrentResourceName();\r\n  const config: ResourceConfig = JSON.parse(LoadResourceFile(resourceName, 'config.json'));\r\n\r\n  let phoneAsItem = GetConvar('npwd:phoneAsItem', '') as string;\r\n  if (phoneAsItem !== '') {\r\n    phoneAsItem = JSON.parse(phoneAsItem) as any;\r\n    Object.entries(config.PhoneAsItem).forEach(([key, value]) => {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      if (phoneAsItem[key] && typeof value === typeof phoneAsItem[key]) {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        config.PhoneAsItem[key] = phoneAsItem[key];\r\n      }\r\n    });\r\n  }\r\n\r\n  return deepMergeObjects({}, defaultConfig, config) as any;\r\n})();\r\n", "export default {\r\n  TWITTER: 'TWITTER',\r\n  MATCH: 'MATCH',\r\n  MESSAGES: 'MESSAGES',\r\n  NOTES: 'NOTES',\r\n  MARKETPLACE: 'MARKETPLACE',\r\n  CONTACTS: 'CONTACTS',\r\n  CAMERA: 'CAMERA',\r\n  PHONE: 'PHONE',\r\n};\r\n", "import apps from './apps';\r\n\r\nexport function sendMessage(app: string, method: string, data: any): void {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return SendNUIMessage({\r\n    app,\r\n    method,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function sendTwitterMessage(method: string, data: any = {}): void {\r\n  return sendMessage(apps.TWITTER, method, data);\r\n}\r\n\r\nexport function sendMessageEvent(method: string, data: any = {}): void {\r\n  return sendMessage(apps.MESSAGES, method, data);\r\n}\r\n\r\nexport function sendNotesEvent(method: string, data: any = {}): void {\r\n  return sendMessage(apps.NOTES, method, data);\r\n}\r\n\r\nexport function sendMarketplaceEvent(method: string, data: any = {}): void {\r\n  sendMessage(apps.MARKETPLACE, method, data);\r\n}\r\n\r\nexport function sendContactsEvent(method: string, data: any = {}): void {\r\n  sendMessage(apps.CONTACTS, method, data);\r\n}\r\n\r\nexport function sendCameraEvent(method: string, data: any = {}): void {\r\n  sendMessage(apps.CAMERA, method, data);\r\n}\r\n\r\nexport function sendMatchEvent(method: string, data: any = {}): void {\r\n  return sendMessage(apps.MATCH, method, data);\r\n}\r\n\r\nexport function sendPhoneEvent(method: string, data: any = {}): void {\r\n  return sendMessage(apps.PHONE, method, data);\r\n}\r\n", "export const PHONE_NUMBER_REGEX = /^([0-9]{3}-[0-9]{4})|([0-9]{7})$/;\r\nexport interface ScriptMessage<T = any> {\r\n  method: string;\r\n  app: string;\r\n  data: T;\r\n}\r\n\r\nexport enum PhoneEvents {\r\n  OPEN_APP = 'npwd:openApp',\r\n  OPEN_PHONE = 'npwd:open',\r\n  CLOSE_PHONE = 'npwd:close',\r\n  UNLOAD_CHARACTER = 'npwd:unloadCharacter',\r\n  SET_VISIBILITY = 'npwd:setVisibility',\r\n  ADD_SNACKBAR_ALERT = 'npwd:setSnackarAlert',\r\n  SET_NUMBER = 'npwd:setNumber',\r\n  SET_PHONE_READY = 'npwd:phoneReady',\r\n  SET_CONFIG = 'npwd:setPhoneConfig',\r\n  SET_TIME = 'npwd:setGameTime',\r\n  SEND_CREDENTIALS = 'npwd:sendCredentials',\r\n  FETCH_CREDENTIALS = 'npwd:getCredentials',\r\n  TOGGLE_KEYS = 'npwd:toggleAllControls',\r\n  SET_PLAYER_LOADED = 'npwd:setPlayerLoaded',\r\n  IS_PHONE_DISABLED = 'npwd:isPhoneDisabled',\r\n}\r\n\r\n// Used to standardize the server response\r\nexport enum ErrorStringKeys {\r\n  SERVER_ERROR = 'GENERAL_SERVER_ERROR',\r\n  DELETE_FAILED = 'DELETE_FAILED',\r\n  ADD_FAILED = 'ADD_FAILED',\r\n  UPDATE_FAILED = 'UPDATED_FAILED',\r\n  FETCH_FAILED = 'FETCH_FAILED',\r\n}\r\n\r\nexport interface FxServerRespError {\r\n  errorCode: ErrorStringKeys;\r\n  message: string;\r\n}\r\n\r\nexport interface FxServerResponse {\r\n  data?: unknown;\r\n  action: string;\r\n  status: 'success' | 'failure';\r\n  app: string;\r\n  error?: FxServerRespError;\r\n}\r\n", "import { Delay } from '../utils/fivem';\r\n\r\nlet prop = 0;\r\nlet propCreated = false;\r\nconst phoneModel = 'prop_amb_phone';\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  Prop Deletion/Creation handling\r\n *\r\n * * * * * * * * * * * * */\r\n\r\n// TODO: add a option to make server side for people who use entity lockdown.\r\n\r\nexport const newPhoneProp = async () => {\r\n  removePhoneProp(); //deletes the already existing prop before creating another.\r\n  if (!propCreated) {\r\n    RequestModel(phoneModel);\r\n\r\n    while (!HasModelLoaded(phoneModel)) {\r\n      await Delay(1);\r\n    }\r\n\r\n    const playerPed = PlayerPedId();\r\n    const [x, y, z] = GetEntityCoords(playerPed, true);\r\n    prop = CreateObject(GetHashKey(phoneModel), x, y, z + 0.2, true, true, true);\r\n    //prop = CreateObject(GetHashKey(phoneModel), 1.0, 1.0, 1.0, 1, 1, 0)\r\n    const boneIndex = GetPedBoneIndex(playerPed, 28422);\r\n    AttachEntityToEntity(\r\n      prop,\r\n      playerPed,\r\n      boneIndex,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      0.0,\r\n      -0.0,\r\n      true,\r\n      true,\r\n      false,\r\n      true,\r\n      1.0,\r\n      true,\r\n    ); //-- Attaches the phone to the player.\r\n    propCreated = true;\r\n  } else if (propCreated) {\r\n    console.log('prop already created');\r\n  }\r\n};\r\n\r\nexport function removePhoneProp() {\r\n  //-- Triggered in newphoneProp function. Only way to destory the prop correctly.\r\n  if (prop != 0) {\r\n    DeleteEntity(prop);\r\n    prop = 0;\r\n    propCreated = false;\r\n  }\r\n}", "import { newPhoneProp, removePhoneProp } from '../functions';\r\nimport { Delay } from '../../utils/fivem';\r\n\r\nexport enum AnimationState {\r\n  ON_CALL,\r\n  PHONE_OPEN,\r\n  ON_CAMERA,\r\n}\r\n\r\nexport class AnimationService {\r\n  private animationInterval: NodeJS.Timeout;\r\n  private onCall = false;\r\n  private phoneOpen = false;\r\n  private onCamera = false;\r\n\r\n  private createAnimationInterval() {\r\n    this.animationInterval = setInterval(async () => {\r\n      const playerPed = PlayerPedId();\r\n      if (this.onCall) {\r\n        this.handleCallAnimation(playerPed);\r\n      } else if (this.phoneOpen && !this.onCamera) {\r\n        this.handleOpenAnimation(playerPed);\r\n      }\r\n    }, 250);\r\n  }\r\n\r\n  private setPhoneState(state: AnimationState, stateValue: boolean) {\r\n    switch (state) {\r\n      case AnimationState.ON_CALL:\r\n        this.onCall = stateValue;\r\n        break;\r\n      case AnimationState.PHONE_OPEN:\r\n        this.phoneOpen = stateValue;\r\n        break;\r\n      case AnimationState.ON_CAMERA:\r\n        this.onCamera = stateValue;\r\n        break;\r\n    }\r\n\r\n    if (!this.onCall && !this.phoneOpen) {\r\n      if (this.animationInterval) {\r\n        clearInterval(this.animationInterval);\r\n        this.animationInterval = null;\r\n      }\r\n    } else if (!this.animationInterval) {\r\n      this.createAnimationInterval();\r\n    }\r\n  }\r\n\r\n  private handleCallAnimation(playerPed: number) {\r\n    if (IsPedInAnyVehicle(playerPed, true)) {\r\n      this.handleOnCallInVehicle(playerPed);\r\n    } else {\r\n      this.handleOnCallNormal(playerPed);\r\n    }\r\n  }\r\n\r\n  private handleOpenAnimation(playerPed: number) {\r\n    if (IsPedInAnyVehicle(playerPed, true)) {\r\n      this.handleOpenVehicleAnim(playerPed);\r\n    } else {\r\n      this.handleOpenNormalAnim(playerPed);\r\n    }\r\n  }\r\n\r\n  private handleCallEndAnimation(playerPed: number) {\r\n    if (IsPedInAnyVehicle(playerPed, true)) {\r\n      this.handleCallEndVehicleAnim(playerPed);\r\n    } else {\r\n      this.handleCallEndNormalAnim(playerPed);\r\n    }\r\n  }\r\n\r\n  private handleCloseAnimation(playerPed: number) {\r\n    if (IsPedInAnyVehicle(playerPed, true)) {\r\n      this.handleCloseVehicleAnim(playerPed);\r\n    } else {\r\n      this.handleCloseNormalAnim(playerPed);\r\n    }\r\n  }\r\n\r\n  async openPhone(): Promise<void> {\r\n    newPhoneProp();\r\n    if (!this.onCall) {\r\n      this.handleOpenAnimation(PlayerPedId());\r\n    }\r\n    this.setPhoneState(AnimationState.PHONE_OPEN, true);\r\n  }\r\n\r\n  async closePhone(): Promise<void> {\r\n    removePhoneProp();\r\n    this.setPhoneState(AnimationState.PHONE_OPEN, false);\r\n    if (!this.onCall) {\r\n      this.handleCloseAnimation(PlayerPedId());\r\n    }\r\n  }\r\n\r\n  async startPhoneCall(): Promise<void> {\r\n    this.handleCallAnimation(PlayerPedId());\r\n    this.setPhoneState(AnimationState.ON_CALL, true);\r\n  }\r\n\r\n  async endPhoneCall(): Promise<void> {\r\n    this.handleCallEndAnimation(PlayerPedId());\r\n    this.setPhoneState(AnimationState.ON_CALL, false);\r\n  }\r\n\r\n  async openCamera() {\r\n    this.setPhoneState(AnimationState.ON_CAMERA, true);\r\n  }\r\n\r\n  async closeCamera() {\r\n    this.setPhoneState(AnimationState.ON_CAMERA, false);\r\n  }\r\n\r\n  private async loadAnimDict(dict: any) {\r\n    //-- Loads the animation dict. Used in the anim functions.\r\n    RequestAnimDict(dict);\r\n    while (!HasAnimDictLoaded(dict)) {\r\n      await Delay(100);\r\n    }\r\n  }\r\n\r\n  private async handleOpenVehicleAnim(playerPed: number): Promise<void> {\r\n    const dict = 'anim@cellphone@in_car@ps';\r\n    const anim = 'cellphone_text_in';\r\n    await this.loadAnimDict(dict);\r\n\r\n    if (!IsEntityPlayingAnim(playerPed, dict, anim, 3)) {\r\n      SetCurrentPedWeapon(playerPed, 0xa2719263, true);\r\n      TaskPlayAnim(playerPed, dict, anim, 7.0, -1, -1, 50, 0, false, false, false);\r\n    }\r\n  }\r\n\r\n  private async handleOpenNormalAnim(playerPed: number): Promise<void> {\r\n    //While not in a vehicle it will use this dict.\r\n    const dict = 'cellphone@';\r\n    const anim = 'cellphone_text_in';\r\n    await this.loadAnimDict(dict);\r\n\r\n    if (!IsEntityPlayingAnim(playerPed, dict, anim, 3)) {\r\n      SetCurrentPedWeapon(playerPed, 0xa2719263, true);\r\n      TaskPlayAnim(playerPed, dict, anim, 8.0, -1, -1, 50, 0, false, false, false);\r\n    }\r\n  }\r\n\r\n  private async handleCloseVehicleAnim(playerPed: number): Promise<void> {\r\n    const DICT = 'anim@cellphone@in_car@ps';\r\n    StopAnimTask(playerPed, DICT, 'cellphone_text_in', 1.0); // Do both incase they were on the phone.\r\n    StopAnimTask(playerPed, DICT, 'cellphone_call_to_text', 1.0);\r\n    removePhoneProp();\r\n  }\r\n\r\n  private async handleCloseNormalAnim(playerPed: number): Promise<void> {\r\n    const DICT = 'cellphone@';\r\n    const ANIM = 'cellphone_text_out';\r\n    StopAnimTask(playerPed, DICT, 'cellphone_text_in', 1.0);\r\n    await Delay(100);\r\n    await this.loadAnimDict(DICT);\r\n    TaskPlayAnim(playerPed, DICT, ANIM, 7.0, -1, -1, 50, 0, false, false, false);\r\n    await Delay(200);\r\n    StopAnimTask(playerPed, DICT, ANIM, 1.0);\r\n    removePhoneProp();\r\n  }\r\n\r\n  private async handleOnCallInVehicle(playerPed: number): Promise<void> {\r\n    const DICT = 'anim@cellphone@in_car@ps';\r\n    const ANIM = 'cellphone_call_listen_base';\r\n\r\n    if (!IsEntityPlayingAnim(playerPed, DICT, ANIM, 3)) {\r\n      await this.loadAnimDict(DICT);\r\n      TaskPlayAnim(playerPed, DICT, ANIM, 3.0, 3.0, -1, 49, 0, false, false, false);\r\n    }\r\n  }\r\n\r\n  private async handleOnCallNormal(playerPed: number): Promise<void> {\r\n    const DICT = 'cellphone@';\r\n    const ANIM = 'cellphone_call_listen_base';\r\n    if (!IsEntityPlayingAnim(playerPed, DICT, ANIM, 3)) {\r\n      await this.loadAnimDict(DICT);\r\n      TaskPlayAnim(playerPed, DICT, ANIM, 3.0, 3.0, -1, 49, 0, false, false, false);\r\n    }\r\n  }\r\n\r\n  private async handleCallEndVehicleAnim(playerPed: number): Promise<void> {\r\n    const DICT = 'anim@cellphone@in_car@ps';\r\n    const ANIM = 'cellphone_call_to_text';\r\n    StopAnimTask(playerPed, DICT, 'cellphone_call_listen_base', 1.0);\r\n    await this.loadAnimDict(DICT);\r\n    TaskPlayAnim(playerPed, DICT, ANIM, 1.3, 5.0, -1, 50, 0, false, false, false);\r\n  }\r\n\r\n  private async handleCallEndNormalAnim(playerPed: number): Promise<void> {\r\n    const DICT = 'cellphone@';\r\n    const ANIM = 'cellphone_call_to_text';\r\n\r\n    if (IsEntityPlayingAnim(playerPed, 'cellphone@', 'cellphone_call_listen_base', 49)) {\r\n      await this.loadAnimDict(DICT);\r\n      TaskPlayAnim(playerPed, DICT, ANIM, 2.5, 8.0, -1, 50, 0, false, false, false);\r\n    }\r\n  }\r\n}\r\n", "import { AnimationService } from \"./animation.service\";\r\n\r\nexport const animationService = new AnimationService();", "import { sendMessage } from '../utils/messages';\r\nimport { PhoneEvents } from '../../typings/phone';\r\nimport { config } from './cl_config';\r\nimport { animationService } from './animations/animation.controller';\r\nimport { RegisterNuiCB } from './cl_utils';\r\n\r\n// All main globals that are set and used across files\r\nglobal.isPhoneOpen = false;\r\nglobal.isPhoneDisabled = false;\r\nglobal.isPlayerLoaded = false;\r\n\r\nconst exps = global.exports;\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  Phone initialize data\r\n *\r\n * * * * * * * * * * * * */\r\n\r\nonNet(PhoneEvents.SET_PLAYER_LOADED, (state: boolean) => {\r\n  global.isPlayerLoaded = state;\r\n  // Whenever a player is unloaded, we need to communicate this to the NUI layer.\r\n  // resetting the global state.\r\n  sendMessage('PHONE', PhoneEvents.UNLOAD_CHARACTER, {});\r\n});\r\n\r\nRegisterKeyMapping(\r\n  config.general.toggleCommand,\r\n  'Toggle Phone',\r\n  'keyboard',\r\n  config.general.toggleKey,\r\n);\r\n\r\nsetTimeout(() => {\r\n  emit('chat:addSuggestion', `${config.general.toggleCommand}`, 'Toggle displaying your cellphone');\r\n}, 1000);\r\n\r\nconst getCurrentGameTime = () => {\r\n  let hour: string | number = GetClockHours();\r\n\r\n  let minute: string | number = GetClockMinutes();\r\n\r\n  // Format time if need be\r\n  if (hour < 10) hour = `0${hour}`;\r\n  if (minute < 10) minute = `0${minute}`;\r\n\r\n  return `${hour}:${minute}`;\r\n};\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  Phone Visibility Handling\r\n *\r\n * * * * * * * * * * * * */\r\n\r\nexport const showPhone = async (): Promise<void> => {\r\n  global.isPhoneOpen = true;\r\n  const time = getCurrentGameTime();\r\n  await animationService.openPhone(); // Animation starts before the phone is open\r\n  emitNet(PhoneEvents.FETCH_CREDENTIALS);\r\n  SetCursorLocation(0.9, 0.922); //Experimental\r\n  sendMessage('PHONE', PhoneEvents.SET_VISIBILITY, true);\r\n  sendMessage('PHONE', PhoneEvents.SET_TIME, time);\r\n  SetNuiFocus(true, true);\r\n  SetNuiFocusKeepInput(true);\r\n  emit('npwd:disableControlActions', true);\r\n};\r\n\r\nexport const hidePhone = async (): Promise<void> => {\r\n  global.isPhoneOpen = false;\r\n  sendMessage('PHONE', PhoneEvents.SET_VISIBILITY, false);\r\n  await animationService.closePhone();\r\n  SetNuiFocus(false, false);\r\n  SetNuiFocusKeepInput(false);\r\n  emit('npwd:disableControlActions', false);\r\n};\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  Register Command and Keybinding\r\n *\r\n * * * * * * * * * * * * */\r\nRegisterCommand(\r\n  config.general.toggleCommand,\r\n  async () => {\r\n    //-- Toggles Phone\r\n    // Check to see if the phone is marked as disabled\r\n    if (!global.isPhoneDisabled) await togglePhone();\r\n  },\r\n  false,\r\n);\r\n\r\nRegisterCommand(\r\n  'phone:restart',\r\n  async () => {\r\n    await hidePhone();\r\n    sendMessage('PHONE', PhoneEvents.UNLOAD_CHARACTER, {});\r\n  },\r\n  false,\r\n);\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  Misc. Helper Functions\r\n *\r\n * * * * * * * * * * * * */\r\n\r\nexport const checkHasPhone = async (): Promise<boolean> => {\r\n  if (!config.PhoneAsItem.enabled) return true;\r\n  const exportResp = await Promise.resolve(\r\n    exps[config.PhoneAsItem.exportResource][config.PhoneAsItem.exportFunction](),\r\n  );\r\n  if (typeof exportResp !== 'number' && typeof exportResp !== 'boolean') {\r\n    throw new Error('You must return either a boolean or number from your export function');\r\n  }\r\n\r\n  return !!exportResp;\r\n};\r\n\r\nasync function togglePhone(): Promise<void> {\r\n  const canAccess = await checkHasPhone();\r\n  if (!canAccess) return;\r\n  if (global.isPhoneOpen) return await hidePhone();\r\n  await showPhone();\r\n}\r\n\r\nonNet(PhoneEvents.SEND_CREDENTIALS, (number: string) => {\r\n  sendMessage('SIMCARD', PhoneEvents.SET_NUMBER, number);\r\n});\r\n\r\non('onResourceStop', (resource: string) => {\r\n  if (resource === GetCurrentResourceName()) {\r\n    sendMessage('PHONE', PhoneEvents.SET_VISIBILITY, false);\r\n    SetNuiFocus(false, false);\r\n    animationService.endPhoneCall();\r\n    animationService.closePhone();\r\n    ClearPedTasks(PlayerPedId()); //Leave here until launch as it'll fix any stuck animations.\r\n  }\r\n});\r\n\r\n// DO NOT CHANGE THIS EITHER, PLEASE - CHIP\r\n// ^ AND WHAT ARE YOU GOING TO DO HUH? - KIDZ\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  NUI Service Callback Registration\r\n *\r\n * * * * * * * * * * * * */\r\nRegisterNuiCB<void>(PhoneEvents.CLOSE_PHONE, async (_, cb) => {\r\n  await hidePhone();\r\n  cb();\r\n});\r\n\r\n// NOTE: This probably has an edge case when phone is closed for some reason\r\n// and we need to toggle keep input off\r\nRegisterNuiCB<{ keepGameFocus: boolean }>(\r\n  PhoneEvents.TOGGLE_KEYS,\r\n  async ({ keepGameFocus }, cb) => {\r\n    // We will only\r\n    if (global.isPhoneOpen) SetNuiFocusKeepInput(keepGameFocus);\r\n    cb({});\r\n  },\r\n);\r\n\r\n/* * * * * * * * * * * * *\r\n *\r\n *  PhoneAsItem Export Checker\r\n *\r\n * * * * * * * * * * * * */\r\nif (config.PhoneAsItem.enabled) {\r\n  setTimeout(() => {\r\n    let doesExportExist = false;\r\n\r\n    const { exportResource, exportFunction } = config.PhoneAsItem;\r\n    emit(`__cfx_export_${exportResource}_${exportFunction}`, () => {\r\n      doesExportExist = true;\r\n    });\r\n\r\n    if (!doesExportExist) {\r\n      console.log('\\n^1Incorrect PhoneAsItem configuration detected. Export does not exist.^0\\n');\r\n    }\r\n  }, 100);\r\n}\r\n\r\n// setTick(async () => {\r\n//   while (config.SwimDestroy) {\r\n//     await Delay(config.RunRate * 1000);\r\n//     if (IsPedSwimming(PlayerPedId())) {\r\n//       let chance = Math.floor(Math.random() * 100 + 1);\r\n//       if (chance <= config.DestoryChance) {\r\n//         countPhone((countPhone: boolean) => {\r\n//           if (countPhone) {\r\n//             ESX.ShowNotification(\"Your phone is ruined from the water!\");\r\n//             destroyedPhone = true;\r\n//           }\r\n//         });\r\n//       }\r\n//       if (destroyedPhone) {\r\n//         await Delay(config.DestroyPhoneReCheck * 60000);\r\n//       }\r\n//     }\r\n//   }\r\n// });\r\n\r\n// Will update the phone's time even while its open\r\n// setInterval(() => {\r\n//   const time = getCurrentGameTime()\r\n//   sendMessage('PHONE', 'setTime', time)\r\n// }, 2000);\r\n", "export interface NewTweet {\r\n  message: string;\r\n  images?: string;\r\n  retweet?: number;\r\n}\r\n\r\nexport type SETTING_MENTIONS = 'mentions';\r\nexport type SETTINGS_ALL_TWEETS = 'all';\r\n\r\nexport interface Tweet extends NewTweet {\r\n  profile_name: string;\r\n  profile_id: number;\r\n  id: number;\r\n  identifier: string;\r\n  isMine: boolean;\r\n  isLiked: boolean;\r\n  isReported: boolean;\r\n  avatar_url: string;\r\n  isRetweet: number | boolean;\r\n  isRetweetedByPlayer?: boolean;\r\n  retweetIdentifier: string;\r\n  retweetId: string;\r\n  seconds_since_tweet: number;\r\n  retweetProfileName: string;\r\n  retweetAvatarUrl: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Image {\r\n  id: string;\r\n  link: string;\r\n}\r\nexport interface FormattedTweet extends Omit<Tweet, 'images'> {\r\n  images: Image[];\r\n}\r\n\r\nexport interface Profile {\r\n  id: number;\r\n  profile_name: string;\r\n  identifier: string;\r\n  avatar_url?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface UpdateProfileProps {\r\n  avatar_url: string;\r\n  profile_name: string;\r\n}\r\n\r\nexport enum TwitterEvents {\r\n  FETCH_TWEETS = 'npwd:fetchTweets',\r\n  FETCH_TWEETS_FILTERED = 'npwd:fetchTweetsFiltered',\r\n  CREATE_PROFILE = 'npwd:createTwitterProfile',\r\n  GET_OR_CREATE_PROFILE = 'npwd:getOrCreateTwitterProfile',\r\n  UPDATE_PROFILE = 'npwd:updateTwitterProfile',\r\n  CREATE_TWEET = 'npwd:createTweet',\r\n  CREATE_TWEET_BROADCAST = 'createTweetBroadcast',\r\n  DELETE_TWEET = 'npwd:deleteTweet',\r\n  TOGGLE_LIKE = 'npwd:toggleLike',\r\n  RETWEET = 'npwd:retweet',\r\n  REPORT = 'npwd:reportTweet',\r\n}\r\n", "import { TwitterEvents } from '../../typings/twitter';\r\nimport { sendTwitterMessage } from '../utils/messages';\r\nimport { RegisterNuiProxy } from './cl_utils';\r\n\r\nRegisterNuiProxy(TwitterEvents.GET_OR_CREATE_PROFILE);\r\nRegisterNuiProxy(TwitterEvents.DELETE_TWEET);\r\nRegisterNuiProxy(TwitterEvents.UPDATE_PROFILE);\r\nRegisterNuiProxy(TwitterEvents.CREATE_PROFILE);\r\nRegisterNuiProxy(TwitterEvents.FETCH_TWEETS);\r\nRegisterNuiProxy(TwitterEvents.CREATE_TWEET);\r\nRegisterNuiProxy(TwitterEvents.FETCH_TWEETS_FILTERED);\r\nRegisterNuiProxy(TwitterEvents.TOGGLE_LIKE);\r\nRegisterNuiProxy(TwitterEvents.REPORT);\r\nRegisterNuiProxy(TwitterEvents.RETWEET);\r\n\r\nonNet(TwitterEvents.CREATE_TWEET_BROADCAST, (tweet: any) => {\r\n  sendTwitterMessage(TwitterEvents.CREATE_TWEET_BROADCAST, tweet);\r\n});\r\n", "export type AlertCategory =\r\n  | 'CONTACT_ADD_SUCCESS'\r\n  | 'CONTACT_ADD_FAILED'\r\n  | 'CONTACT_UPDATE_SUCCESS'\r\n  | 'CONTACT_UPDATE_FAILED'\r\n  | 'CONTACT_DELETE_SUCCESS'\r\n  | 'CONTACT_DELETE_FAILED';\r\n\r\nexport interface PreDBContact {\r\n  display: string;\r\n  number: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport interface Contact extends PreDBContact {\r\n  id: number;\r\n}\r\n\r\nexport interface ContactDeleteDTO {\r\n  id: number;\r\n}\r\n\r\nexport enum ContactResp {\r\n  ADD_FAILED = 'CONTACT.FEEDBACK.ADD_FAILED',\r\n  UPDATE_FAILED = 'CONTACT.FEEDBACK.UPDATE_FAILED',\r\n  INVALID_HOST = 'GENERIC_INVALID_IMAGE_HOST',\r\n}\r\n\r\nexport enum ContactsDatabaseLimits {\r\n  avatar = 255,\r\n  number = 20,\r\n  display = 255,\r\n}\r\n\r\nexport enum ContactEvents {\r\n  GET_CONTACTS = 'npwd:getContacts',\r\n  ADD_CONTACT = 'npwd:addContacts',\r\n  UPDATE_CONTACT = 'npwd:updateContact',\r\n  DELETE_CONTACT = 'npwd:deleteContact',\r\n  // Used to fill in information through an export event\r\n  ADD_CONTACT_EXPORT = 'npwd:addContactExport',\r\n}\r\n\r\nexport interface AddContactExportData {\r\n  name?: string;\r\n  number: string;\r\n  avatar?: string;\r\n}\r\n", "import { ContactEvents } from '../../typings/contact';\r\nimport { RegisterNuiProxy } from './cl_utils';\r\n\r\nRegisterNuiProxy(ContactEvents.GET_CONTACTS);\r\nRegisterNuiProxy(ContactEvents.ADD_CONTACT);\r\nRegisterNuiProxy(ContactEvents.DELETE_CONTACT);\r\nRegisterNuiProxy(ContactEvents.UPDATE_CONTACT);\r\n", "export interface MarketplaceListing extends MarketplaceListingBase {\r\n  id: number;\r\n  identifier?: string;\r\n  username: string;\r\n  name: string;\r\n  number: string;\r\n}\r\n\r\nexport interface MarketplaceListingBase {\r\n  title: string;\r\n  url: string;\r\n  description: string;\r\n}\r\n\r\nexport enum MarketplaceDatabaseLimits {\r\n  title = 255,\r\n  description = 255,\r\n  url = 255,\r\n}\r\n\r\nexport enum MarketplaceResp {\r\n  CREATE_FAILED = 'MARKETPLACE.FEEDBACK.CREATE_LISTING_FAILED',\r\n  DUPLICATE = 'MARKETPLACE.FEEDBACK.DUPLICATE_LISTING',\r\n  INVALID_IMAGE_HOST = 'GENERIC_INVALID_IMAGE_HOST',\r\n}\r\n\r\nexport enum MarketplaceEvents {\r\n  ADD_LISTING = 'npwd:addListing',\r\n  FETCH_LISTING = 'npwd:fetchAllListings',\r\n  DELETE_LISTING = 'npwd:marketplaceDeleteListing',\r\n  DELETE_LISTINGS_ON_DROP = 'npwd:marketplaceDeleteListingsOnDrop',\r\n  REPORT_LISTING = 'npwd:reportListing',\r\n  BROADCAST_ADD = 'npwd:sendMarketplaceBroadcastAdd',\r\n  BROADCAST_DELETE = 'npwd:sendMarketplaceBroadcastDelete',\r\n}\r\n\r\nexport interface MarketplaceBroadcastAddDTO {\r\n  listing: MarketplaceListing;\r\n}\r\n\r\nexport interface MarketplaceDeleteDTO {\r\n  id: number;\r\n}\r\n\r\nexport interface MarketplaceReportDTO {\r\n  id: number;\r\n}\r\n\r\nexport type ReportListingDTO = {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  url: string;\r\n};\r\n", "import {\r\n  MarketplaceBroadcastAddDTO,\r\n  MarketplaceDeleteDTO,\r\n  MarketplaceEvents,\r\n} from '../../typings/marketplace';\r\nimport { RegisterNuiProxy } from './cl_utils';\r\nimport { sendMarketplaceEvent } from '../utils/messages';\r\n\r\nRegisterNuiProxy(MarketplaceEvents.FETCH_LISTING);\r\nRegisterNuiProxy(MarketplaceEvents.ADD_LISTING);\r\n\r\nRegisterNuiProxy(MarketplaceEvents.DELETE_LISTING);\r\nRegisterNuiProxy(MarketplaceEvents.REPORT_LISTING);\r\n\r\nonNet(MarketplaceEvents.BROADCAST_ADD, (broadcastEvent: MarketplaceBroadcastAddDTO) => {\r\n  sendMarketplaceEvent(MarketplaceEvents.BROADCAST_ADD, broadcastEvent);\r\n});\r\n\r\nonNet(MarketplaceEvents.BROADCAST_DELETE, (broadcastEvent: MarketplaceDeleteDTO) => {\r\n  sendMarketplaceEvent(MarketplaceEvents.BROADCAST_DELETE, broadcastEvent);\r\n});\r\n", "import { IAlertProps } from './alerts';\r\n\r\nexport type AlertCategory =\r\n  | 'NOTES_ADD_SUCCESS'\r\n  | 'NOTES_ADD_FAILED'\r\n  | 'NOTES_UPDATE_SUCCESS'\r\n  | 'NOTES_UPDATE_FAILED'\r\n  | 'NOTES_DELETE_SUCCESS'\r\n  | 'NOTES_DELETE_FAILED';\r\n\r\nexport interface INotesAlert {\r\n  alert: AlertCategory;\r\n  setAlert: (type: AlertCategory) => void;\r\n}\r\n\r\nexport interface BeforeDBNote {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nexport interface NoteItem extends BeforeDBNote {\r\n  id: number;\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nexport interface DeleteNoteDTO {\r\n  id: number;\r\n}\r\n\r\nexport enum NotesEvents {\r\n  ADD_NOTE = 'npwd:addNote',\r\n  FETCH_ALL_NOTES = 'npwd:fetchAllNotes',\r\n  DELETE_NOTE = 'npwd:deleteNote',\r\n  UPDATE_NOTE = 'npwd:updateNote',\r\n  ADD_NOTE_EXPORT = 'npwd:addNoteExport',\r\n}\r\n\r\nexport interface AddNoteExportData {\r\n  title?: string;\r\n  content?: string;\r\n}\r\n", "import { NotesEvents } from '../../typings/notes';\r\nimport { RegisterNuiProxy } from './cl_utils';\r\n\r\nRegisterNuiProxy(NotesEvents.ADD_NOTE);\r\nRegisterNuiProxy(NotesEvents.FETCH_ALL_NOTES);\r\nRegisterNuiProxy(NotesEvents.UPDATE_NOTE);\r\nRegisterNuiProxy(NotesEvents.DELETE_NOTE);\r\n", "export interface GalleryPhoto {\r\n  image: string;\r\n  id: number;\r\n}\r\n\r\nexport enum PhotoResp {\r\n  GENERIC = 'CAMERA.FAILED_TO_TAKE_PHOTO',\r\n  INVALID_IMAGE_HOST = 'GENERIC_INVALID_IMAGE_HOST',\r\n}\r\n\r\nexport enum PhotoEvents {\r\n  TAKE_PHOTO = 'npwd:TakePhoto',\r\n  CAMERA_EXITED = 'npwd:cameraExited',\r\n  NPWD_PHOTO_MODE_STARTED = 'npwd:PhotoModeStarted',\r\n  NPWD_PHOTO_MODE_ENDED = 'npwd:PhotoModeEnded',\r\n  TAKE_PHOTO_SUCCESS = 'npwd:TakePhotoSuccess',\r\n  UPLOAD_PHOTO = 'npwd:UploadPhoto',\r\n  FETCH_PHOTOS = 'npwd:FetchPhotos',\r\n  DELETE_PHOTO = 'npwd:deletePhoto',\r\n}\r\n", "import { PhotoEvents } from '../../typings/photo';\r\nimport { Delay } from '../utils/fivem';\r\nimport { sendCameraEvent, sendMessage } from '../utils/messages';\r\nimport { PhoneEvents } from '../../typings/phone';\r\nimport { ClUtils } from './client';\r\nimport { config } from './cl_config';\r\nimport { animationService } from './animations/animation.controller';\r\nimport { RegisterNuiCB, RegisterNuiProxy } from './cl_utils';\r\n\r\nconst SCREENSHOT_BASIC_TOKEN = GetConvar('SCREENSHOT_BASIC_TOKEN', 'none');\r\nconst exp = global.exports;\r\n\r\nlet inCameraMode = false;\r\n\r\nfunction closePhoneTemp() {\r\n  SetNuiFocus(false, false);\r\n  sendMessage('PHONE', PhoneEvents.SET_VISIBILITY, false);\r\n}\r\n\r\nfunction openPhoneTemp() {\r\n  SetNuiFocus(true, true);\r\n  sendMessage('PHONE', PhoneEvents.SET_VISIBILITY, true);\r\n}\r\n\r\nfunction CellFrontCamActivate(activate: boolean) {\r\n  return Citizen.invokeNative('0x2491A93618B7D838', activate);\r\n}\r\n\r\nconst displayHelperText = () => {\r\n  BeginTextCommandDisplayHelp('THREESTRINGS');\r\n  AddTextComponentString('Exit Camera Mode: ~INPUT_CELLPHONE_CANCEL~');\r\n  AddTextComponentString('Toggle Front/Back: ~INPUT_PHONE~');\r\n  AddTextComponentString('Take Picture: ~INPUT_CELLPHONE_SELECT~');\r\n  EndTextCommandDisplayHelp(0, true, false, -1);\r\n};\r\n\r\n// TODO: The flow here seems a little convuluted, we need to take a look at it.\r\nRegisterNuiCB<void>(PhotoEvents.TAKE_PHOTO, async (_, cb) => {\r\n  await animationService.openCamera();\r\n  emit('npwd:disableControlActions', false);\r\n  // Create Phone Prop\r\n  let frontCam = false;\r\n  CreateMobilePhone(1);\r\n  // Active Camera Change\r\n  CellCamActivate(true, true);\r\n  // Hide phone from rendering temporary\r\n  closePhoneTemp();\r\n  SetNuiFocus(false, false);\r\n\r\n  inCameraMode = true;\r\n\r\n  // We want to emit this event for UI handling in other resources\r\n  // We hide nothing in NPWD by default\r\n  emit(PhotoEvents.NPWD_PHOTO_MODE_STARTED);\r\n\r\n  while (inCameraMode) {\r\n    await Delay(0);\r\n    // Arrow Up Key, Toggle Front/Back Camera\r\n    if (IsControlJustPressed(1, 27)) {\r\n      frontCam = !frontCam;\r\n      CellFrontCamActivate(frontCam);\r\n      // Enter Key, Take Photo\r\n    } else if (IsControlJustPressed(1, 176)) {\r\n      const resp = await handleTakePicture();\r\n      cb(resp);\r\n      break;\r\n    } else if (IsControlJustPressed(1, 194)) {\r\n      await handleCameraExit();\r\n      break;\r\n    }\r\n    displayHelperText();\r\n  }\r\n\r\n  ClearHelp(true);\r\n  // We can now signal to other resources for ending photo mode\r\n  // and redisplaying HUD components\r\n  emit(PhotoEvents.NPWD_PHOTO_MODE_ENDED);\r\n\r\n  emit('npwd:disableControlActions', true);\r\n  await animationService.closeCamera();\r\n});\r\n\r\nconst handleTakePicture = async () => {\r\n  // Wait a frame so we don't draw the display helper text\r\n  ClearHelp(true);\r\n  await Delay(0);\r\n  /*\r\n   * If we don't do this janky work around players get stuck in their camera\r\n   * until the entire server callback has happened, which doesn't matter for\r\n   * people with fast internet but a lot of people still have slow internet\r\n   */\r\n  setTimeout(() => {\r\n    DestroyMobilePhone();\r\n    CellCamActivate(false, false);\r\n    openPhoneTemp();\r\n    animationService.openPhone();\r\n    emit('npwd:disableControlActions', true);\r\n  }, 200);\r\n  const resp = await takePhoto();\r\n  inCameraMode = false;\r\n  return resp;\r\n};\r\n\r\nconst handleCameraExit = async () => {\r\n  sendCameraEvent(PhotoEvents.CAMERA_EXITED);\r\n  ClearHelp(true);\r\n  await animationService.closeCamera();\r\n  emit('npwd:disableControlActions', true);\r\n  DestroyMobilePhone();\r\n  CellCamActivate(false, false);\r\n  openPhoneTemp();\r\n  inCameraMode = false;\r\n};\r\n\r\nconst takePhoto = () =>\r\n  new Promise((res, rej) => {\r\n    // Return and log error if screenshot basic token not found\r\n    if (SCREENSHOT_BASIC_TOKEN === 'none' && config.images.useAuthorization) {\r\n      return console.error('Screenshot basic token not found. Please set in server.cfg');\r\n    }\r\n    exp['screenshot-basic'].requestScreenshotUpload(\r\n      config.images.url,\r\n      config.images.type,\r\n      {\r\n        encoding: config.images.imageEncoding,\r\n        headers: {\r\n          authorization: config.images.useAuthorization\r\n            ? `${config.images.authorizationPrefix} ${SCREENSHOT_BASIC_TOKEN}`\r\n            : undefined,\r\n          'content-type': config.images.contentType,\r\n        },\r\n      },\r\n      async (data: any) => {\r\n        try {\r\n          let parsedData = JSON.parse(data);\r\n          for (const index of config.images.returnedDataIndexes) parsedData = parsedData[index];\r\n          const resp = await ClUtils.emitNetPromise(PhotoEvents.UPLOAD_PHOTO, parsedData);\r\n          res(resp);\r\n        } catch (e) {\r\n          rej(e.message);\r\n        }\r\n      },\r\n    );\r\n  });\r\n\r\nRegisterNuiProxy(PhotoEvents.FETCH_PHOTOS);\r\nRegisterNuiProxy(PhotoEvents.DELETE_PHOTO);\r\n", "export interface Message {\r\n  id: number;\r\n  message: string;\r\n  conversation_id?: number;\r\n  author: string;\r\n  is_embed?: boolean;\r\n  embed?: any;\r\n}\r\n\r\nexport interface PreDBMessage {\r\n  conversationId: number;\r\n  conversationList: string;\r\n  tgtPhoneNumber: string;\r\n  sourcePhoneNumber?: string;\r\n  message?: string;\r\n  is_embed?: boolean;\r\n  embed?: any;\r\n}\r\n\r\nexport interface CreateMessageDTO {\r\n  userIdentifier: string;\r\n  authorPhoneNumber: string;\r\n  conversationId: number;\r\n  message: string;\r\n  is_embed: boolean;\r\n  embed: any;\r\n}\r\n\r\nexport interface MessageConversation {\r\n  id: number;\r\n  conversationList: string;\r\n  label: string;\r\n  participant?: string;\r\n  isGroupChat: boolean;\r\n  unread?: number;\r\n  unreadCount?: number;\r\n  updatedAt?: number;\r\n}\r\n\r\nexport interface PreDBConversation {\r\n  participants: string[];\r\n  conversationLabel: string;\r\n  isGroupChat: boolean;\r\n}\r\n\r\nexport interface MessagesRequest {\r\n  conversationId: string;\r\n  page: number;\r\n}\r\n\r\nexport interface DeleteConversationRequest {\r\n  conversationsId: number[];\r\n}\r\n\r\n/**\r\n * Used for the raw npwd_messages_groups row responses\r\n */\r\nexport interface UnformattedMessageConversation {\r\n  conversation_id: string;\r\n  user_identifier: string;\r\n  participant_identifier: string;\r\n  phone_number: string;\r\n  avatar?: string;\r\n  display?: string;\r\n  updatedAt?: string;\r\n  unread: number;\r\n}\r\n\r\n/**\r\n * Used to help consolidate raw npwd_messages_groups rows into\r\n * a mapping of a single message group\r\n */\r\nexport interface MessageGroupMapping {\r\n  [groupId: string]: {\r\n    user_identifier: string;\r\n    // Participant displays\r\n    participants: string[];\r\n    phoneNumbers: string[];\r\n    label?: string;\r\n    avatar?: string;\r\n    updatedAt: string;\r\n    unreadCount: number;\r\n  };\r\n}\r\n\r\nexport interface CreateMessageGroupResult {\r\n  error?: boolean;\r\n  phoneNumber?: string;\r\n  duplicate?: boolean;\r\n  conversationId?: string;\r\n  mine?: boolean;\r\n  participant: string;\r\n  identifiers: string[];\r\n  doesExist: UnformattedMessageConversation | null;\r\n}\r\n\r\nexport interface CreateMessageBroadcast {\r\n  message: string;\r\n  groupName: string;\r\n  groupId: string;\r\n}\r\n\r\nexport interface SetMessageRead {\r\n  groupId: string;\r\n}\r\n\r\nexport interface MessageConversationResponse {\r\n  conversation_id: number;\r\n  phoneNumber: string;\r\n  updatedAt: number;\r\n  conversationList: string;\r\n  label: string;\r\n}\r\n\r\nexport interface OnMessageExportCtx {\r\n  /**\r\n   * The incoming message object\r\n   */\r\n  data: PreDBMessage;\r\n\r\n  source: number;\r\n\r\n  /**\r\n   * Reponds with a message to the source\r\n   * @param message\r\n   */\r\n  respond: (ctx: any, message: string) => void;\r\n}\r\n\r\nexport interface EmitMessageExportCtx {\r\n  senderNumber: string;\r\n  targetNumber: string;\r\n  message: string;\r\n}\r\n\r\nexport enum MessageEvents {\r\n  FETCH_MESSAGE_CONVERSATIONS = 'npwd:fetchMessageGroups',\r\n  FETCH_MESSAGE_GROUPS_SUCCESS = 'npwd:fetchMessageGroupsSuccess',\r\n  FETCH_MESSAGE_GROUPS_FAILED = 'npwd:fetchMessageGroupsFailed',\r\n  CREATE_MESSAGE_CONVERSATION = 'npwd:createMessageGroup',\r\n  CREATE_MESSAGE_CONVERSATION_SUCCESS = 'npwd:createMessageConversationSuccess',\r\n  CREATE_MESSAGE_GROUP_SUCCESS = 'npwd:createMessageGroupSuccess',\r\n  CREATE_MESSAGE_GROUP_FAILED = 'npwd:createMessageGroupFailed',\r\n  SEND_MESSAGE = 'npwd:sendMessage',\r\n  SEND_EMBED_MESSAGE = 'npwd:sendEmbedMessage',\r\n  SEND_MESSAGE_SUCCESS = 'npwd:sendMessageSuccess',\r\n  SEND_MESSAGE_FAILED = 'npwd:sendMessageFailed',\r\n  DELETE_MESSAGE = 'npwd:deleteMessage',\r\n  FETCH_MESSAGES = 'npwd:fetchMessages',\r\n  FETCH_MESSAGES_SUCCESS = 'npwd:fetchMessagesSuccess',\r\n  FETCH_MESSAGES_FAILED = 'npwd:fetchMessagesFailed',\r\n  FETCH_INITIAL_MESSAGES = 'npwd:fetchInitialMessages',\r\n  ACTION_RESULT = 'npwd:setMessagesAlert',\r\n  CREATE_MESSAGE_BROADCAST = 'npwd:createMessagesBroadcast',\r\n  SET_MESSAGE_READ = 'npwd:setReadMessages',\r\n  DELETE_CONVERSATION = 'nwpd:deleteConversation',\r\n  GET_MESSAGE_LOCATION = 'npwd:getMessageLocation',\r\n  MESSAGES_SET_WAYPOINT = 'npwd:setWaypoint',\r\n}\r\n\r\nexport interface Location {\r\n  phoneNumber: string;\r\n  coords: number[];\r\n}\r\n", "import {\r\n  CreateMessageBroadcast,\r\n  MessageConversationResponse,\r\n  MessageEvents,\r\n  PreDBMessage,\r\n} from '../../typings/messages';\r\nimport { sendMessageEvent } from '../utils/messages';\r\nimport { RegisterNuiProxy, RegisterNuiCB } from './cl_utils';\r\n\r\nRegisterNuiProxy(MessageEvents.FETCH_MESSAGE_CONVERSATIONS);\r\nRegisterNuiProxy(MessageEvents.DELETE_MESSAGE);\r\nRegisterNuiProxy(MessageEvents.FETCH_MESSAGES);\r\nRegisterNuiProxy(MessageEvents.CREATE_MESSAGE_CONVERSATION);\r\nRegisterNuiProxy(MessageEvents.DELETE_CONVERSATION);\r\nRegisterNuiProxy(MessageEvents.SEND_MESSAGE);\r\nRegisterNuiProxy(MessageEvents.SET_MESSAGE_READ);\r\nRegisterNuiProxy(MessageEvents.GET_MESSAGE_LOCATION);\r\n\r\nRegisterNuiCB(MessageEvents.MESSAGES_SET_WAYPOINT, ({ coords }: { coords: number[] }) => {\r\n  SetNewWaypoint(coords[0], coords[1]);\r\n});\r\n\r\nonNet(MessageEvents.SEND_MESSAGE_SUCCESS, (messageDto: PreDBMessage) => {\r\n  sendMessageEvent(MessageEvents.SEND_MESSAGE_SUCCESS, messageDto);\r\n});\r\n\r\nonNet(MessageEvents.CREATE_MESSAGE_BROADCAST, (result: CreateMessageBroadcast) => {\r\n  sendMessageEvent(MessageEvents.CREATE_MESSAGE_BROADCAST, result);\r\n});\r\n\r\nonNet(MessageEvents.CREATE_MESSAGE_CONVERSATION_SUCCESS, (result: MessageConversationResponse) => {\r\n  sendMessageEvent(MessageEvents.CREATE_MESSAGE_CONVERSATION_SUCCESS, result);\r\n});\r\n", "export interface ActiveCall {\r\n  is_accepted: boolean;\r\n  isTransmitter: boolean;\r\n  transmitter: string;\r\n  receiver: string;\r\n  channelId?: number;\r\n  isUnavailable?: boolean;\r\n  start?: string;\r\n  identifier?: string;\r\n}\r\n\r\nexport interface InitializeCallDTO {\r\n  receiverNumber: string;\r\n}\r\n\r\nexport interface StartCallEventData {\r\n  transmitter: string;\r\n  receiver: string;\r\n  isTransmitter: boolean;\r\n  isUnavailable?: boolean;\r\n}\r\n\r\nexport interface EndCallDTO {\r\n  transmitterNumber: string;\r\n  isTransmitter: boolean;\r\n  isUnavailable: boolean;\r\n}\r\n\r\nexport interface TransmitterNumDTO {\r\n  transmitterNumber: string;\r\n}\r\n\r\nexport interface CallWasAcceptedEvent {\r\n  channelId: number;\r\n  currentCall: CallHistoryItem;\r\n  isTransmitter: boolean;\r\n}\r\n\r\nexport interface ActiveCallRaw {\r\n  identifier: string;\r\n  transmitter: string;\r\n  transmitterSource: number;\r\n  receiver: string;\r\n  receiverSource: number;\r\n  start: string;\r\n  is_accepted: boolean;\r\n}\r\n\r\nexport interface CallHistoryItem {\r\n  id?: number | string;\r\n  identifier?: string;\r\n  transmitter: string;\r\n  transmitterSource?: number;\r\n  receiver: string;\r\n  receiverSource?: number;\r\n  start: string;\r\n  end?: number;\r\n  is_accepted: boolean;\r\n}\r\n\r\nexport enum CallRejectReasons {\r\n  DECLINED,\r\n  BUSY_LINE,\r\n}\r\n\r\nexport enum CallEvents {\r\n  INITIALIZE_CALL = 'npwd:beginCall',\r\n  START_CALL = 'npwd:startCall',\r\n  ACCEPT_CALL = 'npwd:acceptCall',\r\n  END_CALL = 'npwd:endCall',\r\n  WAS_ENDED = 'npwd:callEnded',\r\n  WAS_ACCEPTED = 'npwd:callAccepted',\r\n  REJECTED = 'npwd:rejectCall',\r\n  WAS_REJECTED = 'npwd:callRejected',\r\n  FETCH_CALLS = 'npwd:fetchCalls',\r\n  SET_CALL_INFO = 'npwd:setCaller',\r\n  SET_CALL_MODAL = 'npwd:callModal',\r\n  SEND_ALERT = 'npwd:callSetAlert',\r\n  SAVE_CALL = 'npwd:saveCall',\r\n}\r\n", "export class Sound {\r\n  private readonly _soundName: string;\r\n  private readonly _soundSetName: string;\r\n  readonly _soundId: number;\r\n\r\n  constructor(soundName: string, soundSetName: string) {\r\n    this._soundName = soundName;\r\n    this._soundSetName = soundSetName;\r\n\r\n    this._soundId = GetSoundId();\r\n  }\r\n\r\n  play() {\r\n    PlaySoundFrontend(this._soundId, this._soundName, this._soundSetName, false);\r\n  }\r\n\r\n  stop() {\r\n    StopSound(this._soundId);\r\n  }\r\n}\r\n", "import { checkHasPhone } from '../cl_main';\r\nimport { IAlertProps } from '@typings/alerts';\r\nimport { ActiveCall, CallEvents, CallRejectReasons } from '@typings/call';\r\nimport { Sound } from '../sounds/client-sound.class';\r\n\r\nconst exp = global.exports;\r\n\r\nexport class CallService {\r\n  private currentCall: number;\r\n  private currentPendingCall: string | null;\r\n  private callSound: Sound;\r\n  private callSoundName = 'Remote_Ring';\r\n  private hangUpSoundName = 'Hang_Up';\r\n  private soundSet = 'Phone_SoundSet_Default';\r\n\r\n  // Using the Micheal set for hang up, since the default is awful.\r\n  private hangUpSoundSet = 'Phone_SoundSet_Michael';\r\n\r\n  constructor() {\r\n    this.currentCall = 0;\r\n  }\r\n\r\n  static sendCallAction<T>(method: CallEvents, data: T): void {\r\n    SendNUIMessage({\r\n      app: 'CALL',\r\n      method,\r\n      data,\r\n    });\r\n  }\r\n\r\n  static sendDialerAction<T>(method: CallEvents, data: T): void {\r\n    SendNUIMessage({\r\n      app: 'DIALER',\r\n      method,\r\n      data,\r\n    });\r\n  }\r\n\r\n  isInCall() {\r\n    return this.currentCall !== 0;\r\n  }\r\n\r\n  isCurrentCall(tgtCall: number) {\r\n    return this.currentCall === tgtCall;\r\n  }\r\n\r\n  isInPendingCall() {\r\n    return !!this.currentPendingCall;\r\n  }\r\n\r\n  isCurrentPendingCall(target: string) {\r\n    return target === this.currentPendingCall;\r\n  }\r\n\r\n  openCallModal(show: boolean) {\r\n    CallService.sendCallAction<boolean>(CallEvents.SET_CALL_MODAL, show);\r\n  }\r\n\r\n  handleRejectCall(receiver: string) {\r\n    // we don't want to reset our UI if we're in a call already or if we're currently starting a call that hasn't been canceled\r\n    if (this.isInCall() || !this.isCurrentPendingCall(receiver)) return;\r\n    if (this.callSound) this.callSound.stop();\r\n    this.currentPendingCall = null;\r\n    this.openCallModal(false);\r\n    CallService.sendCallAction(CallEvents.SET_CALL_INFO, null);\r\n\r\n    const hangUpSound = new Sound(this.hangUpSoundName, this.hangUpSoundSet);\r\n    hangUpSound.play();\r\n  }\r\n\r\n  async handleStartCall(\r\n    transmitter: string,\r\n    receiver: string,\r\n    isTransmitter: boolean,\r\n    isUnavailable: boolean,\r\n  ) {\r\n    // If we're already in a call we want to automatically reject\r\n    if (this.isInCall() || !(await checkHasPhone()) || this.currentPendingCall)\r\n      return emitNet(\r\n        CallEvents.REJECTED,\r\n        { transmitterNumber: transmitter },\r\n        CallRejectReasons.BUSY_LINE,\r\n      );\r\n\r\n    this.currentPendingCall = receiver;\r\n\r\n    this.openCallModal(true);\r\n\r\n    if (isTransmitter) {\r\n      this.callSound = new Sound(this.callSoundName, this.soundSet);\r\n      this.callSound.play();\r\n    }\r\n\r\n    CallService.sendCallAction(CallEvents.SET_CALL_INFO, {\r\n      active: true,\r\n      transmitter: transmitter,\r\n      receiver: receiver,\r\n      isTransmitter: isTransmitter,\r\n      accepted: false,\r\n      isUnavailable: isUnavailable,\r\n    });\r\n  }\r\n\r\n  handleCallAccepted(callData: ActiveCall) {\r\n    this.currentCall = callData.channelId;\r\n    if (this.callSound) this.callSound.stop();\r\n    exp['pma-voice'].setCallChannel(callData.channelId);\r\n    CallService.sendCallAction<ActiveCall>(CallEvents.SET_CALL_INFO, callData);\r\n  }\r\n\r\n  handleEndCall() {\r\n    if (this.callSound) this.callSound.stop();\r\n    this.currentCall = 0;\r\n    exp['pma-voice'].setCallChannel(0);\r\n    this.currentPendingCall = null;\r\n\r\n    this.openCallModal(false);\r\n    CallService.sendCallAction<null>(CallEvents.SET_CALL_INFO, null);\r\n\r\n    const hangUpSound = new Sound(this.hangUpSoundName, this.hangUpSoundSet);\r\n    hangUpSound.play();\r\n  }\r\n\r\n  handleSendAlert(alert: IAlertProps) {\r\n    SendNUIMessage({\r\n      app: 'DIALER',\r\n      method: CallEvents.SEND_ALERT,\r\n      data: alert,\r\n    });\r\n  }\r\n}\r\n", "// Will apply any type to source\r\nexport const getSource = (): number => global.source;\r\n\r\n// Will clean string of any character that isn't 0-9, or a-z\r\nexport const clean = (input: string): string => (input ? input.replace(/[^0-9a-z]/gi, '') : input);\r\n\r\ntype onNetTypedCB<T> = (data: T) => void;\r\n\r\n// Simple generic wrapper around onNet for type safety\r\nexport const onNetTyped = <T = any>(eventName: string, cb: onNetTypedCB<T>) => onNet(eventName, cb);\r\n\r\n// Simple generic wrapper around emitNet, except that we switch src and first arg if on server.\r\n// source is defined using the third arg\r\nexport const emitNetTyped = <T = any>(eventName: string, data: T, src?: number) => {\r\n  if (src) {\r\n    return emitNet(eventName, src, data);\r\n  }\r\n\r\n  emitNet(eventName, data);\r\n};\r\n", "import {\r\n  ActiveCall,\r\n  ActiveCallRaw,\r\n  CallEvents,\r\n  EndCallDTO,\r\n  InitializeCallDTO,\r\n  StartCallEventData,\r\n  TransmitterNumDTO,\r\n} from '@typings/call';\r\nimport { IAlertProps } from '@typings/alerts';\r\nimport { CallService } from './cl_calls.service';\r\nimport { animationService } from '../animations/animation.controller';\r\nimport { emitNetTyped, onNetTyped } from '../../server/utils/miscUtils';\r\nimport { RegisterNuiCB, RegisterNuiProxy } from '../cl_utils';\r\nimport { ClUtils } from '../client';\r\nimport { ServerPromiseResp } from '@typings/common';\r\nimport { NuiCallbackFunc } from '@project-error/pe-utils';\r\n\r\nconst callService = new CallService();\r\n\r\nexport const initializeCallHandler = async (data: InitializeCallDTO, cb?: NuiCallbackFunc) => {\r\n  if (callService.isInCall()) return;\r\n\r\n  try {\r\n    const serverRes = await ClUtils.emitNetPromise<ServerPromiseResp<ActiveCall>>(\r\n      CallEvents.INITIALIZE_CALL,\r\n      data,\r\n    );\r\n\r\n    animationService.startPhoneCall();\r\n    // If something went wrong lets inform the client\r\n    if (serverRes.status !== 'ok') {\r\n      return cb(serverRes);\r\n    }\r\n    const { transmitter, isTransmitter, receiver, isUnavailable } = serverRes.data;\r\n    // Start the process of giving NUI feedback by opening NUI modal\r\n    callService.handleStartCall(transmitter, receiver, isTransmitter, isUnavailable);\r\n    cb(serverRes);\r\n  } catch (e) {\r\n    console.error(e);\r\n    cb({ status: 'error', errorMsg: 'CLIENT_TIMED_OUT' });\r\n  }\r\n};\r\n\r\n// Will trigger whenever somebody initializes a call to any number\r\nRegisterNuiCB<InitializeCallDTO>(CallEvents.INITIALIZE_CALL, initializeCallHandler);\r\n\r\nonNetTyped<StartCallEventData>(CallEvents.START_CALL, async (data) => {\r\n  const { transmitter, isTransmitter, receiver, isUnavailable } = data;\r\n  callService.handleStartCall(transmitter, receiver, isTransmitter, isUnavailable);\r\n});\r\n\r\nRegisterNuiCB<TransmitterNumDTO>(CallEvents.ACCEPT_CALL, (data, cb) => {\r\n  animationService.startPhoneCall();\r\n  emitNetTyped<TransmitterNumDTO>(CallEvents.ACCEPT_CALL, data);\r\n  cb({});\r\n});\r\n\r\nonNetTyped<ActiveCall>(CallEvents.WAS_ACCEPTED, (callData) => {\r\n  callService.handleCallAccepted(callData);\r\n});\r\n\r\n// Rejected call\r\nRegisterNuiCB<TransmitterNumDTO>(CallEvents.REJECTED, (data, cb) => {\r\n  emitNetTyped<TransmitterNumDTO>(CallEvents.REJECTED, data);\r\n  cb({});\r\n});\r\n\r\nonNet(CallEvents.WAS_REJECTED, async (currentCall: ActiveCallRaw) => {\r\n  callService.handleRejectCall(currentCall.receiver);\r\n  animationService.endPhoneCall();\r\n  CallService.sendDialerAction(CallEvents.WAS_REJECTED, currentCall);\r\n});\r\n\r\nRegisterNuiCB<EndCallDTO>(CallEvents.END_CALL, async (data, cb) => {\r\n  try {\r\n    const serverRes: ServerPromiseResp<void> = await ClUtils.emitNetPromise(\r\n      CallEvents.END_CALL,\r\n      data,\r\n    );\r\n    if (serverRes.status === 'error') return console.error(serverRes.errorMsg);\r\n    cb({});\r\n  } catch (e) {\r\n    console.error(e);\r\n    cb({ status: 'error', errorMsg: 'CLIENT_TIMED_OUT' });\r\n  }\r\n  animationService.endPhoneCall();\r\n});\r\n\r\nonNet(CallEvents.WAS_ENDED, (callStarter: number, currentCall?: ActiveCallRaw) => {\r\n  if (callService.isInCall() && !callService.isCurrentCall(callStarter)) return;\r\n  callService.handleEndCall();\r\n  animationService.endPhoneCall();\r\n  if (currentCall) {\r\n    CallService.sendDialerAction(CallEvents.WAS_REJECTED, currentCall);\r\n  }\r\n});\r\n\r\n// Simple fetch so lets just proxy it\r\nRegisterNuiProxy(CallEvents.FETCH_CALLS);\r\n\r\nonNet(CallEvents.SEND_ALERT, (alert: IAlertProps) => {\r\n  callService.handleSendAlert(alert);\r\n});\r\n", "export interface NewProfile {\r\n  name: string;\r\n  image: string;\r\n  bio: string;\r\n  job: string;\r\n  location: string;\r\n  tags: string;\r\n}\r\n\r\nexport interface Profile extends NewProfile {\r\n  id: number;\r\n  identifier: string;\r\n  phoneNumber: string;\r\n  viewed: boolean;\r\n  createdAt: number;\r\n  updatedAt: number;\r\n  lastActive: number;\r\n}\r\n\r\nexport interface FormattedProfile extends Profile {\r\n  lastActiveFormatted: string;\r\n  tagList: string[];\r\n}\r\n\r\nexport interface Match extends Profile {\r\n  matchedAt: number;\r\n}\r\n\r\nexport interface FormattedMatch extends FormattedProfile {\r\n  matchedAtFormatted: string;\r\n}\r\n\r\nexport interface Like {\r\n  id: number; // profile id\r\n  liked: boolean;\r\n}\r\n\r\nexport interface CreateMatchBroadcast {\r\n  name: string;\r\n}\r\n\r\nexport enum MatchResp {\r\n  UPDATE_FAILED = 'MATCH.FEEDBACK.UPDATE_PROFILE_FAILED',\r\n}\r\n\r\nexport enum MatchEvents {\r\n  INITIALIZE = 'phone:initializeMatch',\r\n  GET_PROFILES = 'phone:getMatchProfiles',\r\n  CREATE_MY_PROFILE = 'phone:createMyProfile',\r\n  GET_MY_PROFILE = 'phone:getMyProfile',\r\n  UPDATE_MY_PROFILE = 'phone:updateMyProfile',\r\n  GET_MATCHES = 'phone:getMatches',\r\n  SAVE_LIKES = 'phone:saveLikes',\r\n  SAVE_LIKES_BROADCAST = 'phone:saveLikesBroadcast',\r\n  CREATE_MATCH_ACCOUNT_BROADCAST = 'phone:matchAccountBroadcast'\r\n}\r\n", "import { CreateMatchBroadcast, FormattedProfile, MatchEvents } from '../../typings/match';\r\nimport { sendMatchEvent } from '../utils/messages';\r\nimport { RegisterNuiProxy } from './cl_utils';\r\n\r\nRegisterNuiProxy(MatchEvents.GET_PROFILES);\r\nRegisterNuiProxy(MatchEvents.GET_MY_PROFILE);\r\nRegisterNuiProxy(MatchEvents.GET_MATCHES);\r\nRegisterNuiProxy(MatchEvents.SAVE_LIKES);\r\nRegisterNuiProxy(MatchEvents.CREATE_MY_PROFILE);\r\nRegisterNuiProxy(MatchEvents.UPDATE_MY_PROFILE);\r\n\r\nonNet(MatchEvents.SAVE_LIKES_BROADCAST, (result: CreateMatchBroadcast) => {\r\n    sendMatchEvent(MatchEvents.SAVE_LIKES_BROADCAST, result);\r\n});\r\n\r\nonNet(MatchEvents.CREATE_MATCH_ACCOUNT_BROADCAST, (result: FormattedProfile) => {\r\n    sendMatchEvent(MatchEvents.CREATE_MATCH_ACCOUNT_BROADCAST, result);\r\n});", "import { sendContactsEvent, sendMessage, sendNotesEvent, sendPhoneEvent } from '../utils/messages';\r\nimport { PhoneEvents } from '../../typings/phone';\r\nimport { verifyExportArgType } from './cl_utils';\r\nimport { initializeCallHandler } from './calls/cl_calls.controller';\r\nimport { AddContactExportData, ContactEvents } from '../../typings/contact';\r\nimport { AddNoteExportData, NotesEvents } from '../../typings/notes';\r\nimport { hidePhone, showPhone } from './cl_main';\r\n\r\nconst exps = global.exports;\r\n\r\n// Will open an app based on ID\r\nexps('openApp', (app: string) => {\r\n  verifyExportArgType('openApp', app, ['string']);\r\n\r\n  sendMessage('PHONE', PhoneEvents.OPEN_APP, app);\r\n});\r\n\r\n// Will set the phone to open or closed based on based value\r\nexps('setPhoneVisible', async (bool: boolean | number) => {\r\n  verifyExportArgType('setPhoneVisible', bool, ['boolean', 'number']);\r\n\r\n  const isPhoneDisabled = global.isPhoneDisabled;\r\n  const isPhoneOpen = global.isPhoneOpen;\r\n  // We need to make sure that the phone isn't disabled before we use the setter\r\n  if (isPhoneDisabled && !bool && isPhoneOpen) return;\r\n\r\n  const coercedType = !!bool;\r\n\r\n  if (coercedType) await showPhone();\r\n  else await hidePhone();\r\n});\r\n\r\n// Getter equivalent of above\r\nexps('isPhoneVisible', () => global.isPhoneOpen);\r\n\r\n// Will prevent the phone from being opened\r\nexps('setPhoneDisabled', (bool: boolean | number) => {\r\n  verifyExportArgType('setPhoneVisible', bool, ['boolean', 'number']);\r\n  const coercedType = !!bool;\r\n  global.isPhoneDisabled = coercedType;\r\n  sendPhoneEvent(PhoneEvents.IS_PHONE_DISABLED, bool);\r\n});\r\n\r\nexps('isPhoneDisabled', () => global.isPhoneDisabled);\r\n\r\n// Takes in a number to start the call with\r\nexps('startPhoneCall', (number: string) => {\r\n  verifyExportArgType('startPhoneCall', number, ['string']);\r\n\r\n  initializeCallHandler({ receiverNumber: number });\r\n});\r\n\r\n// Will automatically open the contacts app start the new contact process\r\n// filling in all of the fields with passed data. If this number already exists,\r\n// it will edit it.\r\n//\r\n// Data Struct\r\n// interface AddContactExportData {\r\n//   name?: string;\r\n//   number: string;\r\n//   avatar?: string;\r\n// }\r\nexps('fillNewContact', (contactData: AddContactExportData) => {\r\n  verifyExportArgType('fillNewContact', contactData, ['object']);\r\n  sendContactsEvent(ContactEvents.ADD_CONTACT_EXPORT, contactData);\r\n});\r\n\r\n// Will automatically open the notes app and start the new note process\r\n// filling in all of the fields with passed data. If this number already exists,\r\n// it will edit it.\r\n//\r\n// Data Struct\r\n// interface AddNoteExportData {\r\n//   title?: string;\r\n//   content?: string;\r\n// }\r\nexps('fillNewNote', (noteData: AddNoteExportData) => {\r\n  verifyExportArgType('fillNewNote', noteData, ['object']);\r\n  sendNotesEvent(NotesEvents.ADD_NOTE_EXPORT, noteData);\r\n});\r\n", "import { SETTING_MENTIONS, SETTINGS_ALL_TWEETS } from './twitter';\r\n\r\nexport interface IconSetObject {\r\n  custom: boolean;\r\n  name: string;\r\n}\r\n\r\nexport interface SettingOption<T = any> {\r\n  label: string;\r\n  value: T | string | number;\r\n}\r\n\r\nexport enum KvpItems {\r\n  NPWD_RINGTONE = 'npwd-ringtone',\r\n  NPWD_NOTIFICATION = 'npwd-notification',\r\n}\r\n\r\nexport interface IPhoneSettings {\r\n  language: SettingOption;\r\n  iconSet: SettingOption<IconSetObject>;\r\n  wallpaper: SettingOption;\r\n  frame: SettingOption;\r\n  theme: SettingOption;\r\n  zoom: SettingOption;\r\n  streamerMode: boolean;\r\n  ringtone: SettingOption;\r\n  ringtoneVol: number;\r\n  callVolume: number;\r\n  notiSound: SettingOption;\r\n  notiSoundVol: number;\r\n  TWITTER_notiFilter: SettingOption<SETTING_MENTIONS | SETTINGS_ALL_TWEETS>;\r\n  TWITTER_notiSound: SettingOption;\r\n  TWITTER_notiSoundVol: number;\r\n  TWITTER_notifyNewFeedTweet: boolean;\r\n  MARKETPLACE_notifyNewListing: boolean;\r\n}\r\n\r\nexport enum SettingEvents {\r\n  NUI_SETTINGS_UPDATED = 'npwd:nuiSettingsUpdated',\r\n}\r\n", "export class _KvpService {\r\n  setKvp(key: string, value: string): void {\r\n    SetResourceKvp(key, value);\r\n  }\r\n\r\n  setKvpFloat(key: string, value: number): void {\r\n    SetResourceKvpFloat(key, value);\r\n  }\r\n\r\n  setKvpInt(key: string, value: number): void {\r\n    SetResourceKvpInt(key, value);\r\n  }\r\n\r\n  getKvpString(key: string): string {\r\n    return GetResourceKvpString(key);\r\n  }\r\n\r\n  getKvpInt(key: string): number {\r\n    return GetResourceKvpInt(key);\r\n  }\r\n\r\n  getKvpFloat(key: string): number {\r\n    return GetResourceKvpFloat(key);\r\n  }\r\n}\r\nconst KvpService = new _KvpService();\r\nexport default KvpService;\r\n", "import { RegisterNuiCB } from '../cl_utils';\r\nimport { IPhoneSettings, KvpItems, SettingEvents } from '../../../typings/settings';\r\nimport KvpService from './client-kvp.service';\r\n\r\n// This will run once we first load NUI settings stored in localStorage, and every time\r\n// we update it.\r\nRegisterNuiCB<IPhoneSettings>(SettingEvents.NUI_SETTINGS_UPDATED, (cfg, cb) => {\r\n  global.exports['pma-voice'].setCallVolume(cfg.callVolume);\r\n\r\n  KvpService.setKvp(KvpItems.NPWD_RINGTONE, cfg.ringtone.value);\r\n  KvpService.setKvp(KvpItems.NPWD_NOTIFICATION, cfg.notiSound.value);\r\n  cb({});\r\n});\r\n", "export interface IBankCredentials {\r\n  name: string;\r\n  balance: number;\r\n  transactions: ITransactions[]\r\n}\r\n\r\n// data.transferID, data.transferAmount, data.message\r\nexport type TransferData = {\r\n  targetID: number;\r\n  transferAmount: number;\r\n  message: string;\r\n};\r\n\r\nexport interface ITransactions {\r\n  uniqueId: number;\r\n  type: string;\r\n  amount: number;\r\n}\r\n\r\nexport interface Transfer {\r\n  id: number;\r\n  targetID: number;\r\n  uniqueId: string;\r\n  transferAmount: number;\r\n  message: string;\r\n}\r\n\r\nexport enum BankEvents {\r\n  ADD_TRANSFER = 'npwd:addTransfer',\r\n  ADD_TRANSFER_SUCCESS = 'npwd:addTransferSuccess',\r\n  FETCH_TRANSACTIONS = 'npwd:fetchAllTransactions',\r\n  SEND_TRANSFERS = 'npwd:sendTransfers',\r\n  TRANSACTION_ALERT = 'npwd:bankTransactionAlert',\r\n  TRANSACTION_NOTIFICATION = 'npwd:bankTransactionNotification',\r\n  SEND_CREDENTIALS = 'npwd:sendBankCredentials',\r\n  GET_CREDENTIALS = 'npwd:getBankCredentials',\r\n  SEND_ALERT = 'npwd:sendBankAlert',\r\n  SEND_NOTIFICATION = 'npwd:sendBankNotification',\r\n}\r\n", "import { BankEvents, Transfer, ITransactions, IBankCredentials } from '@typings/bank';\r\n\r\nRegisterNuiCallbackType(BankEvents.GET_CREDENTIALS);\r\nRegisterNuiCallbackType(BankEvents.ADD_TRANSFER);\r\n\r\non(`__cfx_nui:${BankEvents.GET_CREDENTIALS}`, (data: any, cb: any) => {\r\n  emitNet(BankEvents.GET_CREDENTIALS);\r\n  cb({});\r\n});\r\n\r\n/**\r\n * targetID\r\n * transferAmount\r\n * message\r\n */\r\non(`__cfx_nui:${BankEvents.ADD_TRANSFER}`, (data: any, cb: any) => {\r\n  emitNet(BankEvents.ADD_TRANSFER, data);\r\n  cb({});\r\n});\r\n\r\n\r\nonNet(BankEvents.SEND_CREDENTIALS, (credentials: IBankCredentials) => {\r\n  SendNUIMessage({\r\n    app: 'BANK',\r\n    method: BankEvents.SEND_CREDENTIALS,\r\n    data: credentials,\r\n  });\r\n\r\n  SendNUIMessage({\r\n    app: 'BANK',\r\n    method: BankEvents.FETCH_TRANSACTIONS,\r\n    data: credentials.transactions,\r\n  });\r\n});\r\n\r\nlet iterator = 0;\r\nonNet(BankEvents.SEND_NOTIFICATION, (message: string) => {\r\n  SendNUIMessage({\r\n    app: 'BANK',\r\n    method: BankEvents.SEND_NOTIFICATION,\r\n    data: {\r\n      title: 'Bank Alert',\r\n      bankNotify: (iterator += 1),\r\n      message: message,\r\n    },\r\n  });\r\n});\r\n", "export enum DarkMarketEvents {\n  FETCH_CRYPTO = 'npwd:fetchCrypto',\n  SHOW_CRYPTO_UI = 'npwd:showCryptoUi',\n  // ADD_TRANSFER = 'npwd:addTransfer',\n  // ADD_TRANSFER_SUCCESS = 'npwd:addTransferSuccess',\n  // FETCH_TRANSACTIONS = 'npwd:fetchAllTransactions',\n  // SEND_TRANSFERS = 'npwd:sendTransfers',\n  // TRANSACTION_ALERT = 'npwd:bankTransactionAlert',\n  // TRANSACTION_NOTIFICATION = 'npwd:bankTransactionNotification',\n  // SEND_CREDENTIALS = 'npwd:sendBankCredentials',\n  // GET_CREDENTIALS = 'npwd:getBankCredentials',\n  // SEND_ALERT = 'npwd:sendBankAlert',\n  // SEND_NOTIFICATION = 'npwd:sendBankNotification',\n}\n", "import { DarkMarketEvents } from '@typings/darkmarket';\n\nRegisterNuiCallbackType(DarkMarketEvents.FETCH_CRYPTO);\n\non(`__cfx_nui:${DarkMarketEvents.FETCH_CRYPTO}`, (data: any, cb: any) => {\n  emitNet(DarkMarketEvents.FETCH_CRYPTO);\n  cb({});\n});\n\nonNet(DarkMarketEvents.SHOW_CRYPTO_UI, (amount: number) => {\n  console.log(amount);\n  SendNUIMessage({\n    app: 'DARKMARKET',\n    method: DarkMarketEvents.SHOW_CRYPTO_UI,\n    data: amount,\n  });\n});\n", "import ClientUtils from './cl_utils';\nimport './cl_config';\n\nimport './cl_main';\nimport './cl_twitter';\nimport './cl_contacts';\nimport './cl_marketplace';\nimport './cl_notes';\nimport './cl_photo';\nimport './cl_messages';\nimport './calls/cl_calls.controller';\nimport './cl_match';\nimport './functions';\nimport './cl_exports';\nimport './settings/client-settings';\nimport './cl_bank';\nimport './cl_darkmarket';\n\nexport const ClUtils = new ClientUtils();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MACa,OAIA;AALb;AAAA;AACO,MAAM,QAAQ,CAAC,OAA8B,IAAI,QAAQ,CAAC,QAAQ,WAAW,KAAK,EAAE,CAAC;AAIrF,MAAM,SAAS,MAAc;AAClC,YAAI,OAAO;AACX,iBAAS,KAAK,GAAG,KAAK,IAAI,MAAM,GAAG;AACjC,kBAAQ;AAAA,iBACD;AAAA,iBACA;AACH,sBAAQ;AACR,sBAAU,MAAK,OAAO,IAAI,KAAM,GAAG,SAAS,EAAE;AAC9C;AAAA,iBACG;AACH,sBAAQ;AACR,sBAAQ;AACR;AAAA,iBACG;AACH,sBAAQ;AACR,sBAAU,MAAK,OAAO,IAAI,IAAK,GAAG,SAAS,EAAE;AAC7C;AAAA;AAEA,sBAAU,MAAK,OAAO,IAAI,KAAM,GAAG,SAAS,EAAE;AAAA;AAAA,QAEpD;AACA,eAAO;AAAA,MACT;AAAA;AAAA;;;AC3BA,MAWA,aAmDa,eAQA,cAcA,kBAkCA;AAtHb;AAAA;AAAA;AACA;AAUA,0BAAiC;AAAA,QAM/B,YAAY,UAA4B;AAJhC,kCAA8B;AAAA,YACpC,gBAAgB;AAAA,UAClB;AAGE,eAAK,YAAY,QAAQ;AAAA,QAC3B;AAAA,QAEO,YAAY,UAA2B;AAC5C,eAAK,YAAY,kCACZ,KAAK,mBACL;AAAA,QAEP;AAAA,QAEO,eAAwB,cAAsB,MAAyB;AAC5E,iBAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAI,cAAc;AAElB,uBAAW,MAAM;AACf,4BAAc;AACd,qBAAO,GAAG,iCAAiC,KAAK,UAAU,mBAAmB;AAAA,YAC/E,GAAG,KAAK,UAAU,cAAc;AAIhC,kBAAM,SAAS,OAAO;AAEtB,kBAAM,kBAAkB,GAAG,aAAa;AAExC,oBAAQ,WAAW,iBAAiB,GAAG,IAAI;AAE3C,kBAAM,oBAAoB,CAAC,SAAY;AACrC,kCAAoB,iBAAiB,iBAAiB;AACtD,kBAAI;AAAa;AACjB,sBAAQ,IAAI;AAAA,YACd;AACA,kBAAM,iBAAiB,iBAAiB;AAAA,UAC1C,CAAC;AAAA,QACH;AAAA,MACF;AASO,MAAM,gBAAgB,CAAU,OAAe,aAA4B;AAChF,gCAAwB,KAAK;AAC7B,WAAG,aAAa,SAAS,QAAQ;AAAA,MACnC;AAKO,MAAM,eAAe,MAAM;AAChC,eAAO,IAAI,QAAa,CAAC,YAAY;AACnC,gBAAM,KAAK,YAAY,MAAM;AAC3B,gBAAI,OAAO;AAAgB,sBAAQ,EAAE;AAAA,UACvC,GAAG,EAAE;AAAA,QACP,CAAC,EAAE,KAAK,CAAC,OAAO,cAAc,EAAE,CAAC;AAAA,MACnC;AAQO,MAAM,mBAAmB,CAAC,UAAkB;AACjD,gCAAwB,KAAK;AAC7B,WAAG,aAAa,SAAS,CAAO,MAAe,OAAiB;AAC9D,cAAI,CAAC,OAAO;AAAgB,kBAAM,aAAa;AAC/C,cAAI;AACF,kBAAM,MAAM,MAAM,QAAQ,eAAe,OAAO,IAAI;AACpD,eAAG,GAAG;AAAA,UACR,SAAS,GAAP;AACA,oBAAQ,MAAM,qDAAqD,CAAC;AACpE,eAAG,EAAE,QAAQ,QAAQ,CAAC;AAAA,UACxB;AAAA,QACF,EAAC;AAAA,MACH;AAsBO,MAAM,sBAAsB,CACjC,YACA,WACA,eACS;AACT,cAAM,gBAAgB,OAAO;AAE7B,YAAI,CAAC,WAAW,SAAS,aAAa;AACpC,gBAAM,IAAI,MACR,UAAU,uDAAuD,WAAW,KAC1E,IACF,cAAc,oBAAoB,gBACpC;AAAA,MACJ;AAAA;AAAA;;;ACnIO,oBAAkB,MAAoB;AAC3C,WAAO,QAAQ,OAAO,SAAS,YAAY,CAAC,MAAM,QAAQ,IAAI;AAAA,EAChE;AAEO,4BAA6B,WAAgB,SAAiB;AACnE,QAAI,CAAC,QAAQ;AAAQ,aAAO;AAC5B,UAAM,SAAS,QAAQ,MAAM;AAE7B,QAAI,SAAS,MAAM,KAAK,SAAS,MAAM,GAAG;AACxC,iBAAW,OAAO,QAAQ;AACxB,YAAI,SAAS,OAAO,IAAI,GAAG;AACzB,cAAI,CAAC,OAAO;AAAM,mBAAO,OAAO,QAAQ,GAAG,MAAM,CAAC,EAAE,CAAC;AACrD,2BAAiB,OAAO,MAAM,OAAO,IAAI;AAAA,QAC3C,OAAO;AACL,iBAAO,OAAO,QAAQ,GAAG,MAAM,OAAO,KAAK,CAAC;AAAA,QAC9C;AAAA,MACF;AAAA,IACF;AAEA,WAAO,iBAAiB,QAAQ,GAAG,OAAO;AAAA,EAC5C;AApBA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,MAKa;AALb;AAAA;AACA;AACA;AAGO,MAAM,SAAU,OAAM;AAC3B,cAAM,eAAe,uBAAuB;AAC5C,cAAM,UAAyB,KAAK,MAAM,iBAAiB,cAAc,aAAa,CAAC;AAEvF,YAAI,cAAc,UAAU,oBAAoB,EAAE;AAClD,YAAI,gBAAgB,IAAI;AACtB,wBAAc,KAAK,MAAM,WAAW;AACpC,iBAAO,QAAQ,QAAO,WAAW,EAAE,QAAQ,CAAC,CAAC,KAAK,WAAW;AAG3D,gBAAI,YAAY,QAAQ,OAAO,UAAU,OAAO,YAAY,MAAM;AAGhE,sBAAO,YAAY,OAAO,YAAY;AAAA,YACxC;AAAA,UACF,CAAC;AAAA,QACH;AAEA,eAAO,iBAAiB,CAAC,GAAG,wBAAe,OAAM;AAAA,MACnD,GAAG;AAAA;AAAA;;;ACxBH,MAAO;AAAP;AAAA;AAAA,MAAO,eAAQ;AAAA,QACb,SAAS;AAAA,QACT,OAAO;AAAA,QACP,UAAU;AAAA,QACV,OAAO;AAAA,QACP,aAAa;AAAA,QACb,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,OAAO;AAAA,MACT;AAAA;AAAA;;;ACPO,uBAAqB,KAAa,QAAgB,MAAiB;AAGxE,WAAO,eAAe;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEO,8BAA4B,QAAgB,OAAY,CAAC,GAAS;AACvE,WAAO,YAAY,aAAK,SAAS,QAAQ,IAAI;AAAA,EAC/C;AAEO,4BAA0B,QAAgB,OAAY,CAAC,GAAS;AACrE,WAAO,YAAY,aAAK,UAAU,QAAQ,IAAI;AAAA,EAChD;AAEO,0BAAwB,QAAgB,OAAY,CAAC,GAAS;AACnE,WAAO,YAAY,aAAK,OAAO,QAAQ,IAAI;AAAA,EAC7C;AAEO,gCAA8B,QAAgB,OAAY,CAAC,GAAS;AACzE,gBAAY,aAAK,aAAa,QAAQ,IAAI;AAAA,EAC5C;AAEO,6BAA2B,QAAgB,OAAY,CAAC,GAAS;AACtE,gBAAY,aAAK,UAAU,QAAQ,IAAI;AAAA,EACzC;AAEO,2BAAyB,QAAgB,OAAY,CAAC,GAAS;AACpE,gBAAY,aAAK,QAAQ,QAAQ,IAAI;AAAA,EACvC;AAEO,0BAAwB,QAAgB,OAAY,CAAC,GAAS;AACnE,WAAO,YAAY,aAAK,OAAO,QAAQ,IAAI;AAAA,EAC7C;AAEO,0BAAwB,QAAgB,OAAY,CAAC,GAAS;AACnE,WAAO,YAAY,aAAK,OAAO,QAAQ,IAAI;AAAA,EAC7C;AA1CA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;;;ACmDO,6BAA2B;AAEhC,QAAI,QAAQ,GAAG;AACb,mBAAa,IAAI;AACjB,aAAO;AACP,oBAAc;AAAA,IAChB;AAAA,EACF;AA1DA,MAEI,MACA,aACE,YAUO;AAdb;AAAA;AAAA;AAEA,MAAI,OAAO;AACX,MAAI,cAAc;AAClB,MAAM,aAAa;AAUZ,MAAM,eAAe,MAAY;AACtC,wBAAgB;AAChB,YAAI,CAAC,aAAa;AAChB,uBAAa,UAAU;AAEvB,iBAAO,CAAC,eAAe,UAAU,GAAG;AAClC,kBAAM,MAAM,CAAC;AAAA,UACf;AAEA,gBAAM,YAAY,YAAY;AAC9B,gBAAM,CAAC,GAAG,GAAG,KAAK,gBAAgB,WAAW,IAAI;AACjD,iBAAO,aAAa,WAAW,UAAU,GAAG,GAAG,GAAG,IAAI,KAAK,MAAM,MAAM,IAAI;AAE3E,gBAAM,YAAY,gBAAgB,WAAW,KAAK;AAClD,+BACE,MACA,WACA,WACA,GACA,GACA,GACA,GACA,GACA,IACA,MACA,MACA,OACA,MACA,GACA,IACF;AACA,wBAAc;AAAA,QAChB,WAAW,aAAa;AACtB,kBAAQ,IAAI,sBAAsB;AAAA,QACpC;AAAA,MACF;AAAA;AAAA;;;ACjDA,MASO;AATP;AAAA;AAAA;AACA;AAQO,+BAAuB;AAAA,QAAvB;AAEG,wBAAS;AACT,2BAAY;AACZ,0BAAW;AAAA;AAAA,QAEX,0BAA0B;AAChC,eAAK,oBAAoB,YAAY,MAAY;AAC/C,kBAAM,YAAY,YAAY;AAC9B,gBAAI,KAAK,QAAQ;AACf,mBAAK,oBAAoB,SAAS;AAAA,YACpC,WAAW,KAAK,aAAa,CAAC,KAAK,UAAU;AAC3C,mBAAK,oBAAoB,SAAS;AAAA,YACpC;AAAA,UACF,IAAG,GAAG;AAAA,QACR;AAAA,QAEQ,cAAc,OAAuB,YAAqB;AAChE,kBAAQ;AAAA,iBACD;AACH,mBAAK,SAAS;AACd;AAAA,iBACG;AACH,mBAAK,YAAY;AACjB;AAAA,iBACG;AACH,mBAAK,WAAW;AAChB;AAAA;AAGJ,cAAI,CAAC,KAAK,UAAU,CAAC,KAAK,WAAW;AACnC,gBAAI,KAAK,mBAAmB;AAC1B,4BAAc,KAAK,iBAAiB;AACpC,mBAAK,oBAAoB;AAAA,YAC3B;AAAA,UACF,WAAW,CAAC,KAAK,mBAAmB;AAClC,iBAAK,wBAAwB;AAAA,UAC/B;AAAA,QACF;AAAA,QAEQ,oBAAoB,WAAmB;AAC7C,cAAI,kBAAkB,WAAW,IAAI,GAAG;AACtC,iBAAK,sBAAsB,SAAS;AAAA,UACtC,OAAO;AACL,iBAAK,mBAAmB,SAAS;AAAA,UACnC;AAAA,QACF;AAAA,QAEQ,oBAAoB,WAAmB;AAC7C,cAAI,kBAAkB,WAAW,IAAI,GAAG;AACtC,iBAAK,sBAAsB,SAAS;AAAA,UACtC,OAAO;AACL,iBAAK,qBAAqB,SAAS;AAAA,UACrC;AAAA,QACF;AAAA,QAEQ,uBAAuB,WAAmB;AAChD,cAAI,kBAAkB,WAAW,IAAI,GAAG;AACtC,iBAAK,yBAAyB,SAAS;AAAA,UACzC,OAAO;AACL,iBAAK,wBAAwB,SAAS;AAAA,UACxC;AAAA,QACF;AAAA,QAEQ,qBAAqB,WAAmB;AAC9C,cAAI,kBAAkB,WAAW,IAAI,GAAG;AACtC,iBAAK,uBAAuB,SAAS;AAAA,UACvC,OAAO;AACL,iBAAK,sBAAsB,SAAS;AAAA,UACtC;AAAA,QACF;AAAA,QAEM,YAA2B;AAAA;AAC/B,yBAAa;AACb,gBAAI,CAAC,KAAK,QAAQ;AAChB,mBAAK,oBAAoB,YAAY,CAAC;AAAA,YACxC;AACA,iBAAK,cAAc,oBAA2B,IAAI;AAAA,UACpD;AAAA;AAAA,QAEM,aAA4B;AAAA;AAChC,4BAAgB;AAChB,iBAAK,cAAc,oBAA2B,KAAK;AACnD,gBAAI,CAAC,KAAK,QAAQ;AAChB,mBAAK,qBAAqB,YAAY,CAAC;AAAA,YACzC;AAAA,UACF;AAAA;AAAA,QAEM,iBAAgC;AAAA;AACpC,iBAAK,oBAAoB,YAAY,CAAC;AACtC,iBAAK,cAAc,iBAAwB,IAAI;AAAA,UACjD;AAAA;AAAA,QAEM,eAA8B;AAAA;AAClC,iBAAK,uBAAuB,YAAY,CAAC;AACzC,iBAAK,cAAc,iBAAwB,KAAK;AAAA,UAClD;AAAA;AAAA,QAEM,aAAa;AAAA;AACjB,iBAAK,cAAc,mBAA0B,IAAI;AAAA,UACnD;AAAA;AAAA,QAEM,cAAc;AAAA;AAClB,iBAAK,cAAc,mBAA0B,KAAK;AAAA,UACpD;AAAA;AAAA,QAEc,aAAa,MAAW;AAAA;AAEpC,4BAAgB,IAAI;AACpB,mBAAO,CAAC,kBAAkB,IAAI,GAAG;AAC/B,oBAAM,MAAM,GAAG;AAAA,YACjB;AAAA,UACF;AAAA;AAAA,QAEc,sBAAsB,WAAkC;AAAA;AACpE,kBAAM,OAAO;AACb,kBAAM,OAAO;AACb,kBAAM,KAAK,aAAa,IAAI;AAE5B,gBAAI,CAAC,oBAAoB,WAAW,MAAM,MAAM,CAAC,GAAG;AAClD,kCAAoB,WAAW,YAAY,IAAI;AAC/C,2BAAa,WAAW,MAAM,MAAM,GAAK,IAAI,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAAA,YAC7E;AAAA,UACF;AAAA;AAAA,QAEc,qBAAqB,WAAkC;AAAA;AAEnE,kBAAM,OAAO;AACb,kBAAM,OAAO;AACb,kBAAM,KAAK,aAAa,IAAI;AAE5B,gBAAI,CAAC,oBAAoB,WAAW,MAAM,MAAM,CAAC,GAAG;AAClD,kCAAoB,WAAW,YAAY,IAAI;AAC/C,2BAAa,WAAW,MAAM,MAAM,GAAK,IAAI,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAAA,YAC7E;AAAA,UACF;AAAA;AAAA,QAEc,uBAAuB,WAAkC;AAAA;AACrE,kBAAM,OAAO;AACb,yBAAa,WAAW,MAAM,qBAAqB,CAAG;AACtD,yBAAa,WAAW,MAAM,0BAA0B,CAAG;AAC3D,4BAAgB;AAAA,UAClB;AAAA;AAAA,QAEc,sBAAsB,WAAkC;AAAA;AACpE,kBAAM,OAAO;AACb,kBAAM,OAAO;AACb,yBAAa,WAAW,MAAM,qBAAqB,CAAG;AACtD,kBAAM,MAAM,GAAG;AACf,kBAAM,KAAK,aAAa,IAAI;AAC5B,yBAAa,WAAW,MAAM,MAAM,GAAK,IAAI,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAC3E,kBAAM,MAAM,GAAG;AACf,yBAAa,WAAW,MAAM,MAAM,CAAG;AACvC,4BAAgB;AAAA,UAClB;AAAA;AAAA,QAEc,sBAAsB,WAAkC;AAAA;AACpE,kBAAM,OAAO;AACb,kBAAM,OAAO;AAEb,gBAAI,CAAC,oBAAoB,WAAW,MAAM,MAAM,CAAC,GAAG;AAClD,oBAAM,KAAK,aAAa,IAAI;AAC5B,2BAAa,WAAW,MAAM,MAAM,GAAK,GAAK,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAAA,YAC9E;AAAA,UACF;AAAA;AAAA,QAEc,mBAAmB,WAAkC;AAAA;AACjE,kBAAM,OAAO;AACb,kBAAM,OAAO;AACb,gBAAI,CAAC,oBAAoB,WAAW,MAAM,MAAM,CAAC,GAAG;AAClD,oBAAM,KAAK,aAAa,IAAI;AAC5B,2BAAa,WAAW,MAAM,MAAM,GAAK,GAAK,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAAA,YAC9E;AAAA,UACF;AAAA;AAAA,QAEc,yBAAyB,WAAkC;AAAA;AACvE,kBAAM,OAAO;AACb,kBAAM,OAAO;AACb,yBAAa,WAAW,MAAM,8BAA8B,CAAG;AAC/D,kBAAM,KAAK,aAAa,IAAI;AAC5B,yBAAa,WAAW,MAAM,MAAM,KAAK,GAAK,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAAA,UAC9E;AAAA;AAAA,QAEc,wBAAwB,WAAkC;AAAA;AACtE,kBAAM,OAAO;AACb,kBAAM,OAAO;AAEb,gBAAI,oBAAoB,WAAW,cAAc,8BAA8B,EAAE,GAAG;AAClF,oBAAM,KAAK,aAAa,IAAI;AAC5B,2BAAa,WAAW,MAAM,MAAM,KAAK,GAAK,IAAI,IAAI,GAAG,OAAO,OAAO,KAAK;AAAA,YAC9E;AAAA,UACF;AAAA;AAAA,MACF;AAAA;AAAA;;;ACzMA,MAEa;AAFb;AAAA;AAAA;AAEO,MAAM,mBAAmB,IAAI,iBAAiB;AAAA;AAAA;;;ACqHrD,yBAA4C;AAAA;AAC1C,YAAM,YAAY,MAAM,cAAc;AACtC,UAAI,CAAC;AAAW;AAChB,UAAI,OAAO;AAAa,eAAO,MAAM,UAAU;AAC/C,YAAM,UAAU;AAAA,IAClB;AAAA;AA5HA,MAWM,MA0BA,oBAkBO,WAaA,WAuCA;AA3Gb;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA,aAAO,cAAc;AACrB,aAAO,kBAAkB;AACzB,aAAO,iBAAiB;AAExB,MAAM,OAAO,OAAO;AAQpB,YAAM,gDAA+B,CAAC,UAAmB;AACvD,eAAO,iBAAiB;AAGxB,oBAAY,SAAS,+CAA8B,CAAC,CAAC;AAAA,MACvD,CAAC;AAED,yBACE,OAAO,QAAQ,eACf,gBACA,YACA,OAAO,QAAQ,SACjB;AAEA,iBAAW,MAAM;AACf,aAAK,sBAAsB,GAAG,OAAO,QAAQ,iBAAiB,kCAAkC;AAAA,MAClG,GAAG,GAAI;AAEP,MAAM,qBAAqB,MAAM;AAC/B,YAAI,OAAwB,cAAc;AAE1C,YAAI,SAA0B,gBAAgB;AAG9C,YAAI,OAAO;AAAI,iBAAO,IAAI;AAC1B,YAAI,SAAS;AAAI,mBAAS,IAAI;AAE9B,eAAO,GAAG,QAAQ;AAAA,MACpB;AAQO,MAAM,YAAY,MAA2B;AAClD,eAAO,cAAc;AACrB,cAAM,OAAO,mBAAmB;AAChC,cAAM,iBAAiB,UAAU;AACjC,gBAAQ,6CAA6B;AACrC,0BAAkB,KAAK,KAAK;AAC5B,oBAAY,SAAS,2CAA4B,IAAI;AACrD,oBAAY,SAAS,mCAAsB,IAAI;AAC/C,oBAAY,MAAM,IAAI;AACtB,6BAAqB,IAAI;AACzB,aAAK,8BAA8B,IAAI;AAAA,MACzC;AAEO,MAAM,YAAY,MAA2B;AAClD,eAAO,cAAc;AACrB,oBAAY,SAAS,2CAA4B,KAAK;AACtD,cAAM,iBAAiB,WAAW;AAClC,oBAAY,OAAO,KAAK;AACxB,6BAAqB,KAAK;AAC1B,aAAK,8BAA8B,KAAK;AAAA,MAC1C;AAOA,sBACE,OAAO,QAAQ,eACf,MAAY;AAGV,YAAI,CAAC,OAAO;AAAiB,gBAAM,YAAY;AAAA,MACjD,IACA,KACF;AAEA,sBACE,iBACA,MAAY;AACV,cAAM,UAAU;AAChB,oBAAY,SAAS,+CAA8B,CAAC,CAAC;AAAA,MACvD,IACA,KACF;AAQO,MAAM,gBAAgB,MAA8B;AACzD,YAAI,CAAC,OAAO,YAAY;AAAS,iBAAO;AACxC,cAAM,aAAa,MAAM,QAAQ,QAC/B,KAAK,OAAO,YAAY,gBAAgB,OAAO,YAAY,gBAAgB,CAC7E;AACA,YAAI,OAAO,eAAe,YAAY,OAAO,eAAe,WAAW;AACrE,gBAAM,IAAI,MAAM,sEAAsE;AAAA,QACxF;AAEA,eAAO,CAAC,CAAC;AAAA,MACX;AASA,YAAM,+CAA8B,CAAC,WAAmB;AACtD,oBAAY,WAAW,mCAAwB,MAAM;AAAA,MACvD,CAAC;AAED,SAAG,kBAAkB,CAAC,aAAqB;AACzC,YAAI,aAAa,uBAAuB,GAAG;AACzC,sBAAY,SAAS,2CAA4B,KAAK;AACtD,sBAAY,OAAO,KAAK;AACxB,2BAAiB,aAAa;AAC9B,2BAAiB,WAAW;AAC5B,wBAAc,YAAY,CAAC;AAAA,QAC7B;AAAA,MACF,CAAC;AAUD,oBAAoB,gCAAyB,CAAO,GAAG,OAAO;AAC5D,cAAM,UAAU;AAChB,WAAG;AAAA,MACL,EAAC;AAID,oBACE,4CACA,CAAO,IAAmB,OAAO,iBAA1B,IAAmB,KAAO,WAA1B,EAAE,iBAAiB,IAAO;AAE/B,YAAI,OAAO;AAAa,+BAAqB,aAAa;AAC1D,WAAG,CAAC,CAAC;AAAA,MACP,EACF;AAOA,UAAI,OAAO,YAAY,SAAS;AAC9B,mBAAW,MAAM;AACf,cAAI,kBAAkB;AAEtB,gBAAM,EAAE,gBAAgB,mBAAmB,OAAO;AAClD,eAAK,gBAAgB,kBAAkB,kBAAkB,MAAM;AAC7D,8BAAkB;AAAA,UACpB,CAAC;AAED,cAAI,CAAC,iBAAiB;AACpB,oBAAQ,IAAI,8EAA8E;AAAA,UAC5F;AAAA,QACF,GAAG,GAAG;AAAA,MACR;AAAA;AAAA;;;ACtLA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AACA;AACA;AAEA,uBAAiB,4DAAmC;AACpD,uBAAiB,qCAA0B;AAC3C,uBAAiB,gDAA4B;AAC7C,uBAAiB,gDAA4B;AAC7C,uBAAiB,qCAA0B;AAC3C,uBAAiB,qCAA0B;AAC3C,uBAAiB,sDAAmC;AACpD,uBAAiB,mCAAyB;AAC1C,uBAAiB,+BAAoB;AACrC,uBAAiB,4BAAqB;AAEtC,YAAM,qDAAsC,CAAC,UAAe;AAC1D,2BAAmB,qDAAsC,KAAK;AAAA,MAChE,CAAC;AAAA;AAAA;;;ACjBD;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AACA;AAEA,uBAAiB,qCAA0B;AAC3C,uBAAiB,oCAAyB;AAC1C,uBAAiB,yCAA4B;AAC7C,uBAAiB,yCAA4B;AAAA;AAAA;;;ACN7C;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAKA;AACA;AAEA,uBAAiB,2CAA+B;AAChD,uBAAiB,mCAA6B;AAE9C,uBAAiB,oDAAgC;AACjD,uBAAiB,yCAAgC;AAEjD,YAAM,wDAAiC,CAAC,mBAA+C;AACrF,6BAAqB,wDAAiC,cAAc;AAAA,MACtE,CAAC;AAED,YAAM,8DAAoC,CAAC,mBAAyC;AAClF,6BAAqB,8DAAoC,cAAc;AAAA,MACzE,CAAC;AAAA;AAAA;;;ACpBD;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AACA;AAEA,uBAAiB,6BAAoB;AACrC,uBAAiB,0CAA2B;AAC5C,uBAAiB,mCAAuB;AACxC,uBAAiB,mCAAuB;AAAA;AAAA;;;ACNxC;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAM,yBAAyB,UAAU,0BAA0B,MAAM;AACzE,UAAM,OAAM,OAAO;AAEnB,UAAI,eAAe;AAEnB,gCAA0B;AACxB,oBAAY,OAAO,KAAK;AACxB,oBAAY,SAAS,2CAA4B,KAAK;AAAA,MACxD;AAEA,+BAAyB;AACvB,oBAAY,MAAM,IAAI;AACtB,oBAAY,SAAS,2CAA4B,IAAI;AAAA,MACvD;AAEA,oCAA8B,UAAmB;AAC/C,eAAO,QAAQ,aAAa,sBAAsB,QAAQ;AAAA,MAC5D;AAEA,UAAM,oBAAoB,MAAM;AAC9B,oCAA4B,cAAc;AAC1C,+BAAuB,4CAA4C;AACnE,+BAAuB,kCAAkC;AACzD,+BAAuB,wCAAwC;AAC/D,kCAA0B,GAAG,MAAM,OAAO,EAAE;AAAA,MAC9C;AAGA,oBAAoB,mCAAwB,CAAO,GAAG,OAAO;AAC3D,cAAM,iBAAiB,WAAW;AAClC,aAAK,8BAA8B,KAAK;AAExC,YAAI,WAAW;AACf,0BAAkB,CAAC;AAEnB,wBAAgB,MAAM,IAAI;AAE1B,uBAAe;AACf,oBAAY,OAAO,KAAK;AAExB,uBAAe;AAIf,aAAK,qDAAmC;AAExC,eAAO,cAAc;AACnB,gBAAM,MAAM,CAAC;AAEb,cAAI,qBAAqB,GAAG,EAAE,GAAG;AAC/B,uBAAW,CAAC;AACZ,iCAAqB,QAAQ;AAAA,UAE/B,WAAW,qBAAqB,GAAG,GAAG,GAAG;AACvC,kBAAM,OAAO,MAAM,kBAAkB;AACrC,eAAG,IAAI;AACP;AAAA,UACF,WAAW,qBAAqB,GAAG,GAAG,GAAG;AACvC,kBAAM,iBAAiB;AACvB;AAAA,UACF;AACA,4BAAkB;AAAA,QACpB;AAEA,kBAAU,IAAI;AAGd,aAAK,iDAAiC;AAEtC,aAAK,8BAA8B,IAAI;AACvC,cAAM,iBAAiB,YAAY;AAAA,MACrC,EAAC;AAED,UAAM,oBAAoB,MAAY;AAEpC,kBAAU,IAAI;AACd,cAAM,MAAM,CAAC;AAMb,mBAAW,MAAM;AACf,6BAAmB;AACnB,0BAAgB,OAAO,KAAK;AAC5B,wBAAc;AACd,2BAAiB,UAAU;AAC3B,eAAK,8BAA8B,IAAI;AAAA,QACzC,GAAG,GAAG;AACN,cAAM,OAAO,MAAM,UAAU;AAC7B,uBAAe;AACf,eAAO;AAAA,MACT;AAEA,UAAM,mBAAmB,MAAY;AACnC,wBAAgB,uCAAyB;AACzC,kBAAU,IAAI;AACd,cAAM,iBAAiB,YAAY;AACnC,aAAK,8BAA8B,IAAI;AACvC,2BAAmB;AACnB,wBAAgB,OAAO,KAAK;AAC5B,sBAAc;AACd,uBAAe;AAAA,MACjB;AAEA,UAAM,YAAY,MAChB,IAAI,QAAQ,CAAC,KAAK,QAAQ;AAExB,YAAI,2BAA2B,UAAU,OAAO,OAAO,kBAAkB;AACvE,iBAAO,QAAQ,MAAM,4DAA4D;AAAA,QACnF;AACA,aAAI,oBAAoB,wBACtB,OAAO,OAAO,KACd,OAAO,OAAO,MACd;AAAA,UACE,UAAU,OAAO,OAAO;AAAA,UACxB,SAAS;AAAA,YACP,eAAe,OAAO,OAAO,mBACzB,GAAG,OAAO,OAAO,uBAAuB,2BACxC;AAAA,YACJ,gBAAgB,OAAO,OAAO;AAAA,UAChC;AAAA,QACF,GACA,CAAO,SAAc;AACnB,cAAI;AACF,gBAAI,aAAa,KAAK,MAAM,IAAI;AAChC,uBAAW,SAAS,OAAO,OAAO;AAAqB,2BAAa,WAAW;AAC/E,kBAAM,OAAO,MAAM,QAAQ,eAAe,uCAA0B,UAAU;AAC9E,gBAAI,IAAI;AAAA,UACV,SAAS,GAAP;AACA,gBAAI,EAAE,OAAO;AAAA,UACf;AAAA,QACF,EACF;AAAA,MACF,CAAC;AAEH,uBAAiB,qCAAwB;AACzC,uBAAiB,qCAAwB;AAAA;AAAA;;;AClJzC;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAMA;AACA;AAEA,uBAAiB,2DAAyC;AAC1D,uBAAiB,yCAA4B;AAC7C,uBAAiB,yCAA4B;AAC7C,uBAAiB,2DAAyC;AAC1D,uBAAiB,mDAAiC;AAClD,uBAAiB,qCAA0B;AAC3C,uBAAiB,6CAA8B;AAC/C,uBAAiB,oDAAkC;AAEnD,oBAAc,gDAAqC,CAAC,EAAE,aAAmC;AACvF,uBAAe,OAAO,IAAI,OAAO,EAAE;AAAA,MACrC,CAAC;AAED,YAAM,sDAAoC,CAAC,eAA6B;AACtE,yBAAiB,sDAAoC,UAAU;AAAA,MACjE,CAAC;AAED,YAAM,+DAAwC,CAAC,WAAmC;AAChF,yBAAiB,+DAAwC,MAAM;AAAA,MACjE,CAAC;AAED,YAAM,mFAAmD,CAAC,WAAwC;AAChG,yBAAiB,mFAAmD,MAAM;AAAA,MAC5E,CAAC;AAAA;AAAA;;;AChCD;AAAA;AAAA;AAAA;;;ACAA,MAAO;AAAP;AAAA;AAAO,oBAAY;AAAA,QAKjB,YAAY,WAAmB,cAAsB;AACnD,eAAK,aAAa;AAClB,eAAK,gBAAgB;AAErB,eAAK,WAAW,WAAW;AAAA,QAC7B;AAAA,QAEA,OAAO;AACL,4BAAkB,KAAK,UAAU,KAAK,YAAY,KAAK,eAAe,KAAK;AAAA,QAC7E;AAAA,QAEA,OAAO;AACL,oBAAU,KAAK,QAAQ;AAAA,QACzB;AAAA,MACF;AAAA;AAAA;;;ACnBA,MAKM,KAEC;AAPP;AAAA;AAAA;AAEA;AACA;AAEA,MAAM,MAAM,OAAO;AAEZ,0BAAkB;AAAA,QAWvB,cAAc;AAPN,+BAAgB;AAChB,iCAAkB;AAClB,0BAAW;AAGX,gCAAiB;AAGvB,eAAK,cAAc;AAAA,QACrB;AAAA,eAEO,eAAkB,QAAoB,MAAe;AAC1D,yBAAe;AAAA,YACb,KAAK;AAAA,YACL;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAAA,eAEO,iBAAoB,QAAoB,MAAe;AAC5D,yBAAe;AAAA,YACb,KAAK;AAAA,YACL;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QAEA,WAAW;AACT,iBAAO,KAAK,gBAAgB;AAAA,QAC9B;AAAA,QAEA,cAAc,SAAiB;AAC7B,iBAAO,KAAK,gBAAgB;AAAA,QAC9B;AAAA,QAEA,kBAAkB;AAChB,iBAAO,CAAC,CAAC,KAAK;AAAA,QAChB;AAAA,QAEA,qBAAqB,QAAgB;AACnC,iBAAO,WAAW,KAAK;AAAA,QACzB;AAAA,QAEA,cAAc,MAAe;AAC3B,sBAAY,eAAwB,uCAA2B,IAAI;AAAA,QACrE;AAAA,QAEA,iBAAiB,UAAkB;AAEjC,cAAI,KAAK,SAAS,KAAK,CAAC,KAAK,qBAAqB,QAAQ;AAAG;AAC7D,cAAI,KAAK;AAAW,iBAAK,UAAU,KAAK;AACxC,eAAK,qBAAqB;AAC1B,eAAK,cAAc,KAAK;AACxB,sBAAY,eAAe,sCAA0B,IAAI;AAEzD,gBAAM,cAAc,IAAI,MAAM,KAAK,iBAAiB,KAAK,cAAc;AACvE,sBAAY,KAAK;AAAA,QACnB;AAAA,QAEM,gBACJ,aACA,UACA,eACA,eACA;AAAA;AAEA,gBAAI,KAAK,SAAS,KAAK,CAAE,OAAM,cAAc,MAAM,KAAK;AACtD,qBAAO,QACL,kCACA,EAAE,mBAAmB,YAAY,GACjC,iBACF;AAEF,iBAAK,qBAAqB;AAE1B,iBAAK,cAAc,IAAI;AAEvB,gBAAI,eAAe;AACjB,mBAAK,YAAY,IAAI,MAAM,KAAK,eAAe,KAAK,QAAQ;AAC5D,mBAAK,UAAU,KAAK;AAAA,YACtB;AAEA,wBAAY,eAAe,sCAA0B;AAAA,cACnD,QAAQ;AAAA,cACR;AAAA,cACA;AAAA,cACA;AAAA,cACA,UAAU;AAAA,cACV;AAAA,YACF,CAAC;AAAA,UACH;AAAA;AAAA,QAEA,mBAAmB,UAAsB;AACvC,eAAK,cAAc,SAAS;AAC5B,cAAI,KAAK;AAAW,iBAAK,UAAU,KAAK;AACxC,cAAI,aAAa,eAAe,SAAS,SAAS;AAClD,sBAAY,eAA2B,sCAA0B,QAAQ;AAAA,QAC3E;AAAA,QAEA,gBAAgB;AACd,cAAI,KAAK;AAAW,iBAAK,UAAU,KAAK;AACxC,eAAK,cAAc;AACnB,cAAI,aAAa,eAAe,CAAC;AACjC,eAAK,qBAAqB;AAE1B,eAAK,cAAc,KAAK;AACxB,sBAAY,eAAqB,sCAA0B,IAAI;AAE/D,gBAAM,cAAc,IAAI,MAAM,KAAK,iBAAiB,KAAK,cAAc;AACvE,sBAAY,KAAK;AAAA,QACnB;AAAA,QAEA,gBAAgB,OAAoB;AAClC,yBAAe;AAAA,YACb,KAAK;AAAA,YACL,QAAQ;AAAA,YACR,MAAM;AAAA,UACR,CAAC;AAAA,QACH;AAAA,MACF;AAAA;AAAA;;;AClIA,MASa,YAIA;AAbb;AAAA;AASO,MAAM,aAAa,CAAU,WAAmB,OAAwB,MAAM,WAAW,EAAE;AAI3F,MAAM,eAAe,CAAU,WAAmB,MAAS,QAAiB;AACjF,YAAI,KAAK;AACP,iBAAO,QAAQ,WAAW,KAAK,IAAI;AAAA,QACrC;AAEA,gBAAQ,WAAW,IAAI;AAAA,MACzB;AAAA;AAAA;;;ACnBA,MAkBM,aAEO;AApBb;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAIA,MAAM,cAAc,IAAI,YAAY;AAE7B,MAAM,wBAAwB,CAAO,MAAyB,OAAyB;AAC5F,YAAI,YAAY,SAAS;AAAG;AAE5B,YAAI;AACF,gBAAM,YAAY,MAAM,QAAQ,eAC9B,wCACA,IACF;AAEA,2BAAiB,eAAe;AAEhC,cAAI,UAAU,WAAW,MAAM;AAC7B,mBAAO,GAAG,SAAS;AAAA,UACrB;AACA,gBAAM,EAAE,aAAa,eAAe,UAAU,kBAAkB,UAAU;AAE1E,sBAAY,gBAAgB,aAAa,UAAU,eAAe,aAAa;AAC/E,aAAG,SAAS;AAAA,QACd,SAAS,GAAP;AACA,kBAAQ,MAAM,CAAC;AACf,aAAG,EAAE,QAAQ,SAAS,UAAU,mBAAmB,CAAC;AAAA,QACtD;AAAA,MACF;AAGA,oBAAiC,wCAA4B,qBAAqB;AAElF,iBAA+B,mCAAuB,CAAO,SAAS;AACpE,cAAM,EAAE,aAAa,eAAe,UAAU,kBAAkB;AAChE,oBAAY,gBAAgB,aAAa,UAAU,eAAe,aAAa;AAAA,MACjF,EAAC;AAED,oBAAiC,qCAAwB,CAAC,MAAM,OAAO;AACrE,yBAAiB,eAAe;AAChC,qBAAgC,qCAAwB,IAAI;AAC5D,WAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAED,iBAAuB,wCAAyB,CAAC,aAAa;AAC5D,oBAAY,mBAAmB,QAAQ;AAAA,MACzC,CAAC;AAGD,oBAAiC,kCAAqB,CAAC,MAAM,OAAO;AAClE,qBAAgC,kCAAqB,IAAI;AACzD,WAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAED,YAAM,wCAAyB,CAAO,gBAA+B;AACnE,oBAAY,iBAAiB,YAAY,QAAQ;AACjD,yBAAiB,aAAa;AAC9B,oBAAY,iBAAiB,wCAAyB,WAAW;AAAA,MACnE,EAAC;AAED,oBAA0B,+BAAqB,CAAO,MAAM,OAAO;AACjE,YAAI;AACF,gBAAM,YAAqC,MAAM,QAAQ,eACvD,+BACA,IACF;AACA,cAAI,UAAU,WAAW;AAAS,mBAAO,QAAQ,MAAM,UAAU,QAAQ;AACzE,aAAG,CAAC,CAAC;AAAA,QACP,SAAS,GAAP;AACA,kBAAQ,MAAM,CAAC;AACf,aAAG,EAAE,QAAQ,SAAS,UAAU,mBAAmB,CAAC;AAAA,QACtD;AACA,yBAAiB,aAAa;AAAA,MAChC,EAAC;AAED,YAAM,kCAAsB,CAAC,aAAqB,gBAAgC;AAChF,YAAI,YAAY,SAAS,KAAK,CAAC,YAAY,cAAc,WAAW;AAAG;AACvE,oBAAY,cAAc;AAC1B,yBAAiB,aAAa;AAC9B,YAAI,aAAa;AACf,sBAAY,iBAAiB,wCAAyB,WAAW;AAAA,QACnE;AAAA,MACF,CAAC;AAGD,uBAAiB,mCAAsB;AAEvC,YAAM,sCAAuB,CAAC,UAAuB;AACnD,oBAAY,gBAAgB,KAAK;AAAA,MACnC,CAAC;AAAA;AAAA;;;ACvGD;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AACA;AACA;AAEA,uBAAiB,2CAAwB;AACzC,uBAAiB,yCAA0B;AAC3C,uBAAiB,oCAAuB;AACxC,uBAAiB,kCAAsB;AACvC,uBAAiB,+CAA6B;AAC9C,uBAAiB,+CAA6B;AAE9C,YAAM,uDAAkC,CAAC,WAAiC;AACtE,uBAAe,uDAAkC,MAAM;AAAA,MAC3D,CAAC;AAED,YAAM,oEAA4C,CAAC,WAA6B;AAC5E,uBAAe,oEAA4C,MAAM;AAAA,MACrE,CAAC;AAAA;AAAA;;;ACjBD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAM,QAAO,OAAO;AAGpB,YAAK,WAAW,CAAC,QAAgB;AAC/B,4BAAoB,WAAW,KAAK,CAAC,QAAQ,CAAC;AAE9C,oBAAY,SAAS,+BAAsB,GAAG;AAAA,MAChD,CAAC;AAGD,YAAK,mBAAmB,CAAO,SAA2B;AACxD,4BAAoB,mBAAmB,MAAM,CAAC,WAAW,QAAQ,CAAC;AAElE,cAAM,kBAAkB,OAAO;AAC/B,cAAM,cAAc,OAAO;AAE3B,YAAI,mBAAmB,CAAC,QAAQ;AAAa;AAE7C,cAAM,cAAc,CAAC,CAAC;AAEtB,YAAI;AAAa,gBAAM,UAAU;AAAA;AAC5B,gBAAM,UAAU;AAAA,MACvB,EAAC;AAGD,YAAK,kBAAkB,MAAM,OAAO,WAAW;AAG/C,YAAK,oBAAoB,CAAC,SAA2B;AACnD,4BAAoB,mBAAmB,MAAM,CAAC,WAAW,QAAQ,CAAC;AAClE,cAAM,cAAc,CAAC,CAAC;AACtB,eAAO,kBAAkB;AACzB,uBAAe,gDAA+B,IAAI;AAAA,MACpD,CAAC;AAED,YAAK,mBAAmB,MAAM,OAAO,eAAe;AAGpD,YAAK,kBAAkB,CAAC,WAAmB;AACzC,4BAAoB,kBAAkB,QAAQ,CAAC,QAAQ,CAAC;AAExD,8BAAsB,EAAE,gBAAgB,OAAO,CAAC;AAAA,MAClD,CAAC;AAYD,YAAK,kBAAkB,CAAC,gBAAsC;AAC5D,4BAAoB,kBAAkB,aAAa,CAAC,QAAQ,CAAC;AAC7D,0BAAkB,kDAAkC,WAAW;AAAA,MACjE,CAAC;AAWD,YAAK,eAAe,CAAC,aAAgC;AACnD,4BAAoB,eAAe,UAAU,CAAC,QAAQ,CAAC;AACvD,uBAAe,4CAA6B,QAAQ;AAAA,MACtD,CAAC;AAAA;AAAA;;;AC/ED;AAAA;AAAA;AAAA;;;ACAA,MAAO,aAyBD,YACC;AA1BP;AAAA;AAAO,0BAAkB;AAAA,QACvB,OAAO,KAAa,OAAqB;AACvC,yBAAe,KAAK,KAAK;AAAA,QAC3B;AAAA,QAEA,YAAY,KAAa,OAAqB;AAC5C,8BAAoB,KAAK,KAAK;AAAA,QAChC;AAAA,QAEA,UAAU,KAAa,OAAqB;AAC1C,4BAAkB,KAAK,KAAK;AAAA,QAC9B;AAAA,QAEA,aAAa,KAAqB;AAChC,iBAAO,qBAAqB,GAAG;AAAA,QACjC;AAAA,QAEA,UAAU,KAAqB;AAC7B,iBAAO,kBAAkB,GAAG;AAAA,QAC9B;AAAA,QAEA,YAAY,KAAqB;AAC/B,iBAAO,oBAAoB,GAAG;AAAA,QAChC;AAAA,MACF;AACA,MAAM,aAAa,IAAI,YAAY;AACnC,MAAO,6BAAQ;AAAA;AAAA;;;AC1Bf;AAAA;AAAA;AACA;AACA;AAIA,oBAA8B,sDAAoC,CAAC,KAAK,OAAO;AAC7E,eAAO,QAAQ,aAAa,cAAc,IAAI,UAAU;AAExD,mCAAW,OAAO,qCAAwB,IAAI,SAAS,KAAK;AAC5D,mCAAW,OAAO,6CAA4B,IAAI,UAAU,KAAK;AACjE,WAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAAA;AAAA;;;ACZD;AAAA;AAAA;AAAA;;;ACAA,MAmCI;AAnCJ;AAAA;AAAA;AAEA,8BAAwB,+CAA0B;AAClD,8BAAwB,qCAAuB;AAE/C,SAAG,aAAa,mDAA8B,CAAC,MAAW,OAAY;AACpE,gBAAQ,+CAA0B;AAClC,WAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAOD,SAAG,aAAa,yCAA2B,CAAC,MAAW,OAAY;AACjE,gBAAQ,uCAAyB,IAAI;AACrC,WAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAGD,YAAM,mDAA6B,CAAC,gBAAkC;AACpE,uBAAe;AAAA,UACb,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAED,uBAAe;AAAA,UACb,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,YAAY;AAAA,QACpB,CAAC;AAAA,MACH,CAAC;AAED,MAAI,WAAW;AACf,YAAM,qDAA8B,CAAC,YAAoB;AACvD,uBAAe;AAAA,UACb,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,YACJ,OAAO;AAAA,YACP,YAAa,YAAY;AAAA,YACzB;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA;AAAA;;;AC9CD;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAEA,8BAAwB,qCAA6B;AAErD,SAAG,aAAa,yCAAiC,CAAC,MAAW,OAAY;AACvE,gBAAQ,qCAA6B;AACrC,WAAG,CAAC,CAAC;AAAA,MACP,CAAC;AAED,YAAM,0CAAiC,CAAC,WAAmB;AACzD,gBAAQ,IAAI,MAAM;AAClB,uBAAe;AAAA,UACb,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAAA,MACH,CAAC;AAAA;AAAA;;;AChBD,MAQA,iBAKA,mBAKa;AAlBb;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAO;AACP;AACA;AACA;AACA;AACA,0BAAO;AACP;AACA;AACA;AAEO,MAAM,UAAU,IAAI,YAAY;AAAA;AAAA;",
  "names": []
}
